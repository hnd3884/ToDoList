{"ast":null,"code":"'use strict'; // shared state names\n\nconst STATE_CLOSING = 'closing';\nconst STATE_CLOSED = 'closed';\nconst STATE_CONNECTING = 'connecting';\nconst STATE_CONNECTED = 'connected'; // An enumeration of topology types we know about\n\nconst TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n}; // An enumeration of server types we know about\n\nconst ServerType = {\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n};\nconst TOPOLOGY_DEFAULTS = {\n  useUnifiedTopology: true,\n  localThresholdMS: 15,\n  serverSelectionTimeoutMS: 30000,\n  heartbeatFrequencyMS: 10000,\n  minHeartbeatFrequencyMS: 500\n};\n\nfunction drainTimerQueue(queue) {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\nfunction clearAndRemoveTimerFrom(timer, timers) {\n  clearTimeout(timer);\n  return timers.delete(timer);\n}\n\nmodule.exports = {\n  STATE_CLOSING,\n  STATE_CLOSED,\n  STATE_CONNECTING,\n  STATE_CONNECTED,\n  TOPOLOGY_DEFAULTS,\n  TopologyType,\n  ServerType,\n  drainTimerQueue,\n  clearAndRemoveTimerFrom\n};","map":{"version":3,"sources":["/home/hoangnd/source/ReactJS/todolist/node_modules/mongodb/lib/core/sdam/common.js"],"names":["STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","TopologyType","Single","ReplicaSetNoPrimary","ReplicaSetWithPrimary","Sharded","Unknown","ServerType","Standalone","Mongos","PossiblePrimary","RSPrimary","RSSecondary","RSArbiter","RSOther","RSGhost","TOPOLOGY_DEFAULTS","useUnifiedTopology","localThresholdMS","serverSelectionTimeoutMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","drainTimerQueue","queue","forEach","clearTimeout","clear","clearAndRemoveTimerFrom","timer","timers","delete","module","exports"],"mappings":"AAAA,a,CAEA;;AACA,MAAMA,aAAa,GAAG,SAAtB;AACA,MAAMC,YAAY,GAAG,QAArB;AACA,MAAMC,gBAAgB,GAAG,YAAzB;AACA,MAAMC,eAAe,GAAG,WAAxB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,QADW;AAEnBC,EAAAA,mBAAmB,EAAE,qBAFF;AAGnBC,EAAAA,qBAAqB,EAAE,uBAHJ;AAInBC,EAAAA,OAAO,EAAE,SAJU;AAKnBC,EAAAA,OAAO,EAAE;AALU,CAArB,C,CAQA;;AACA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,UAAU,EAAE,YADK;AAEjBC,EAAAA,MAAM,EAAE,QAFS;AAGjBC,EAAAA,eAAe,EAAE,iBAHA;AAIjBC,EAAAA,SAAS,EAAE,WAJM;AAKjBC,EAAAA,WAAW,EAAE,aALI;AAMjBC,EAAAA,SAAS,EAAE,WANM;AAOjBC,EAAAA,OAAO,EAAE,SAPQ;AAQjBC,EAAAA,OAAO,EAAE,SARQ;AASjBT,EAAAA,OAAO,EAAE;AATQ,CAAnB;AAYA,MAAMU,iBAAiB,GAAG;AACxBC,EAAAA,kBAAkB,EAAE,IADI;AAExBC,EAAAA,gBAAgB,EAAE,EAFM;AAGxBC,EAAAA,wBAAwB,EAAE,KAHF;AAIxBC,EAAAA,oBAAoB,EAAE,KAJE;AAKxBC,EAAAA,uBAAuB,EAAE;AALD,CAA1B;;AAQA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9BA,EAAAA,KAAK,CAACC,OAAN,CAAcC,YAAd;AACAF,EAAAA,KAAK,CAACG,KAAN;AACD;;AAED,SAASC,uBAAT,CAAiCC,KAAjC,EAAwCC,MAAxC,EAAgD;AAC9CJ,EAAAA,YAAY,CAACG,KAAD,CAAZ;AACA,SAAOC,MAAM,CAACC,MAAP,CAAcF,KAAd,CAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AACfnC,EAAAA,aADe;AAEfC,EAAAA,YAFe;AAGfC,EAAAA,gBAHe;AAIfC,EAAAA,eAJe;AAKfgB,EAAAA,iBALe;AAMff,EAAAA,YANe;AAOfM,EAAAA,UAPe;AAQfe,EAAAA,eARe;AASfK,EAAAA;AATe,CAAjB","sourcesContent":["'use strict';\n\n// shared state names\nconst STATE_CLOSING = 'closing';\nconst STATE_CLOSED = 'closed';\nconst STATE_CONNECTING = 'connecting';\nconst STATE_CONNECTED = 'connected';\n\n// An enumeration of topology types we know about\nconst TopologyType = {\n  Single: 'Single',\n  ReplicaSetNoPrimary: 'ReplicaSetNoPrimary',\n  ReplicaSetWithPrimary: 'ReplicaSetWithPrimary',\n  Sharded: 'Sharded',\n  Unknown: 'Unknown'\n};\n\n// An enumeration of server types we know about\nconst ServerType = {\n  Standalone: 'Standalone',\n  Mongos: 'Mongos',\n  PossiblePrimary: 'PossiblePrimary',\n  RSPrimary: 'RSPrimary',\n  RSSecondary: 'RSSecondary',\n  RSArbiter: 'RSArbiter',\n  RSOther: 'RSOther',\n  RSGhost: 'RSGhost',\n  Unknown: 'Unknown'\n};\n\nconst TOPOLOGY_DEFAULTS = {\n  useUnifiedTopology: true,\n  localThresholdMS: 15,\n  serverSelectionTimeoutMS: 30000,\n  heartbeatFrequencyMS: 10000,\n  minHeartbeatFrequencyMS: 500\n};\n\nfunction drainTimerQueue(queue) {\n  queue.forEach(clearTimeout);\n  queue.clear();\n}\n\nfunction clearAndRemoveTimerFrom(timer, timers) {\n  clearTimeout(timer);\n  return timers.delete(timer);\n}\n\nmodule.exports = {\n  STATE_CLOSING,\n  STATE_CLOSED,\n  STATE_CONNECTING,\n  STATE_CONNECTED,\n  TOPOLOGY_DEFAULTS,\n  TopologyType,\n  ServerType,\n  drainTimerQueue,\n  clearAndRemoveTimerFrom\n};\n"]},"metadata":{},"sourceType":"script"}