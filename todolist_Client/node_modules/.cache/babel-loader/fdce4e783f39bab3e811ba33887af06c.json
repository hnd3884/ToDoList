{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst applyWriteConcern = require('../utils').applyWriteConcern;\n\nconst debugOptions = require('../utils').debugOptions;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst MongoError = require('../core').MongoError;\n\nconst ReadPreference = require('../core').ReadPreference;\n\nconst resolveReadPreference = require('../utils').resolveReadPreference;\n\nconst MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nconst debugFields = ['authSource', 'w', 'wtimeout', 'j', 'native_parser', 'forceServerObjectId', 'serializeFunctions', 'raw', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bufferMaxEntries', 'numberOfRetries', 'retryMiliSeconds', 'readPreference', 'pkFactory', 'parentDb', 'promiseLibrary', 'noListener'];\n\nclass CommandOperation extends OperationBase {\n  constructor(db, options, collection, command) {\n    super(options);\n\n    if (!this.hasAspect(Aspect.WRITE_OPERATION)) {\n      if (collection != null) {\n        this.options.readPreference = resolveReadPreference(collection, options);\n      } else {\n        this.options.readPreference = resolveReadPreference(db, options);\n      }\n    } else {\n      if (collection != null) {\n        applyWriteConcern(this.options, {\n          db,\n          coll: collection\n        }, this.options);\n      } else {\n        applyWriteConcern(this.options, {\n          db\n        }, this.options);\n      }\n\n      this.options.readPreference = ReadPreference.primary;\n    }\n\n    this.db = db;\n\n    if (command != null) {\n      this.command = command;\n    }\n\n    if (collection != null) {\n      this.collection = collection;\n    }\n  }\n\n  _buildCommand() {\n    if (this.command != null) {\n      return this.command;\n    }\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const options = Object.assign({}, this.options); // Did the user destroy the topology\n\n    if (db.serverConfig && db.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    let command;\n\n    try {\n      command = this._buildCommand();\n    } catch (e) {\n      return callback(e);\n    } // Get the db name we are executing against\n\n\n    const dbName = options.dbName || options.authdb || db.databaseName; // Convert the readPreference if its not a write\n\n    if (this.hasAspect(Aspect.WRITE_OPERATION)) {\n      if (options.writeConcern && (!options.session || !options.session.inTransaction())) {\n        command.writeConcern = options.writeConcern;\n      }\n    } // Debug information\n\n\n    if (db.s.logger.isDebug()) {\n      db.s.logger.debug(`executing command ${JSON.stringify(command)} against ${dbName}.$cmd with options [${JSON.stringify(debugOptions(debugFields, options))}]`);\n    }\n\n    const namespace = this.namespace != null ? this.namespace : new MongoDBNamespace(dbName, '$cmd'); // Execute command\n\n    db.s.topology.command(namespace, command, options, (err, result) => {\n      if (err) return handleCallback(callback, err);\n      if (options.full) return handleCallback(callback, null, result);\n      handleCallback(callback, null, result.result);\n    });\n  }\n\n}\n\nmodule.exports = CommandOperation;","map":{"version":3,"sources":["/home/hoangnd/source/ReactJS/todolist/node_modules/mongodb/lib/operations/command.js"],"names":["Aspect","require","OperationBase","applyWriteConcern","debugOptions","handleCallback","MongoError","ReadPreference","resolveReadPreference","MongoDBNamespace","debugFields","CommandOperation","constructor","db","options","collection","command","hasAspect","WRITE_OPERATION","readPreference","coll","primary","_buildCommand","execute","callback","Object","assign","serverConfig","isDestroyed","e","dbName","authdb","databaseName","writeConcern","session","inTransaction","s","logger","isDebug","debug","JSON","stringify","namespace","topology","err","result","full","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst OperationBase = require('./operation').OperationBase;\nconst applyWriteConcern = require('../utils').applyWriteConcern;\nconst debugOptions = require('../utils').debugOptions;\nconst handleCallback = require('../utils').handleCallback;\nconst MongoError = require('../core').MongoError;\nconst ReadPreference = require('../core').ReadPreference;\nconst resolveReadPreference = require('../utils').resolveReadPreference;\nconst MongoDBNamespace = require('../utils').MongoDBNamespace;\n\nconst debugFields = [\n  'authSource',\n  'w',\n  'wtimeout',\n  'j',\n  'native_parser',\n  'forceServerObjectId',\n  'serializeFunctions',\n  'raw',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'bufferMaxEntries',\n  'numberOfRetries',\n  'retryMiliSeconds',\n  'readPreference',\n  'pkFactory',\n  'parentDb',\n  'promiseLibrary',\n  'noListener'\n];\n\nclass CommandOperation extends OperationBase {\n  constructor(db, options, collection, command) {\n    super(options);\n\n    if (!this.hasAspect(Aspect.WRITE_OPERATION)) {\n      if (collection != null) {\n        this.options.readPreference = resolveReadPreference(collection, options);\n      } else {\n        this.options.readPreference = resolveReadPreference(db, options);\n      }\n    } else {\n      if (collection != null) {\n        applyWriteConcern(this.options, { db, coll: collection }, this.options);\n      } else {\n        applyWriteConcern(this.options, { db }, this.options);\n      }\n      this.options.readPreference = ReadPreference.primary;\n    }\n\n    this.db = db;\n\n    if (command != null) {\n      this.command = command;\n    }\n\n    if (collection != null) {\n      this.collection = collection;\n    }\n  }\n\n  _buildCommand() {\n    if (this.command != null) {\n      return this.command;\n    }\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const options = Object.assign({}, this.options);\n\n    // Did the user destroy the topology\n    if (db.serverConfig && db.serverConfig.isDestroyed()) {\n      return callback(new MongoError('topology was destroyed'));\n    }\n\n    let command;\n    try {\n      command = this._buildCommand();\n    } catch (e) {\n      return callback(e);\n    }\n\n    // Get the db name we are executing against\n    const dbName = options.dbName || options.authdb || db.databaseName;\n\n    // Convert the readPreference if its not a write\n    if (this.hasAspect(Aspect.WRITE_OPERATION)) {\n      if (options.writeConcern && (!options.session || !options.session.inTransaction())) {\n        command.writeConcern = options.writeConcern;\n      }\n    }\n\n    // Debug information\n    if (db.s.logger.isDebug()) {\n      db.s.logger.debug(\n        `executing command ${JSON.stringify(\n          command\n        )} against ${dbName}.$cmd with options [${JSON.stringify(\n          debugOptions(debugFields, options)\n        )}]`\n      );\n    }\n\n    const namespace =\n      this.namespace != null ? this.namespace : new MongoDBNamespace(dbName, '$cmd');\n\n    // Execute command\n    db.s.topology.command(namespace, command, options, (err, result) => {\n      if (err) return handleCallback(callback, err);\n      if (options.full) return handleCallback(callback, null, result);\n      handleCallback(callback, null, result.result);\n    });\n  }\n}\n\nmodule.exports = CommandOperation;\n"]},"metadata":{},"sourceType":"script"}