{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst CommandOperation = require('./command');\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst handleCallback = require('../utils').handleCallback;\n\nconst MongoError = require('../core').MongoError;\n\nconst parseIndexOptions = require('../utils').parseIndexOptions;\n\nconst keysToOmit = new Set(['name', 'key', 'writeConcern', 'w', 'wtimeout', 'j', 'fsync', 'readPreference', 'session']);\n\nclass CreateIndexOperation extends CommandOperation {\n  constructor(db, name, fieldOrSpec, options) {\n    super(db, options); // Build the index\n\n    const indexParameters = parseIndexOptions(fieldOrSpec); // Generate the index name\n\n    const indexName = typeof options.name === 'string' ? options.name : indexParameters.name; // Set up the index\n\n    const indexesObject = {\n      name: indexName,\n      key: indexParameters.fieldHash\n    };\n    this.name = name;\n    this.fieldOrSpec = fieldOrSpec;\n    this.indexes = indexesObject;\n  }\n\n  _buildCommand() {\n    const options = this.options;\n    const name = this.name;\n    const indexes = this.indexes; // merge all the options\n\n    for (let optionName in options) {\n      if (!keysToOmit.has(optionName)) {\n        indexes[optionName] = options[optionName];\n      }\n    } // Create command, apply write concern to command\n\n\n    const cmd = {\n      createIndexes: name,\n      indexes: [indexes]\n    };\n    return cmd;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const options = this.options;\n    const indexes = this.indexes; // Get capabilities\n\n    const capabilities = db.s.topology.capabilities(); // Did the user pass in a collation, check if our write server supports it\n\n    if (options.collation && capabilities && !capabilities.commandsTakeCollation) {\n      // Create a new error\n      const error = new MongoError('server/primary/mongos does not support collation');\n      error.code = 67; // Return the error\n\n      return callback(error);\n    } // Ensure we have a callback\n\n\n    if (options.writeConcern && typeof callback !== 'function') {\n      throw MongoError.create({\n        message: 'Cannot use a writeConcern without a provided callback',\n        driver: true\n      });\n    } // Attempt to run using createIndexes command\n\n\n    super.execute((err, result) => {\n      if (err == null) return handleCallback(callback, err, indexes.name);\n      return handleCallback(callback, err, result);\n    });\n  }\n\n}\n\ndefineAspects(CreateIndexOperation, Aspect.WRITE_OPERATION);\nmodule.exports = CreateIndexOperation;","map":{"version":3,"sources":["/home/hoangnd/source/ReactJS/todolist/node_modules/mongodb/lib/operations/create_index.js"],"names":["Aspect","require","CommandOperation","defineAspects","handleCallback","MongoError","parseIndexOptions","keysToOmit","Set","CreateIndexOperation","constructor","db","name","fieldOrSpec","options","indexParameters","indexName","indexesObject","key","fieldHash","indexes","_buildCommand","optionName","has","cmd","createIndexes","execute","callback","capabilities","s","topology","collation","commandsTakeCollation","error","code","writeConcern","create","message","driver","err","result","WRITE_OPERATION","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst CommandOperation = require('./command');\nconst defineAspects = require('./operation').defineAspects;\nconst handleCallback = require('../utils').handleCallback;\nconst MongoError = require('../core').MongoError;\nconst parseIndexOptions = require('../utils').parseIndexOptions;\n\nconst keysToOmit = new Set([\n  'name',\n  'key',\n  'writeConcern',\n  'w',\n  'wtimeout',\n  'j',\n  'fsync',\n  'readPreference',\n  'session'\n]);\n\nclass CreateIndexOperation extends CommandOperation {\n  constructor(db, name, fieldOrSpec, options) {\n    super(db, options);\n\n    // Build the index\n    const indexParameters = parseIndexOptions(fieldOrSpec);\n    // Generate the index name\n    const indexName = typeof options.name === 'string' ? options.name : indexParameters.name;\n    // Set up the index\n    const indexesObject = { name: indexName, key: indexParameters.fieldHash };\n\n    this.name = name;\n    this.fieldOrSpec = fieldOrSpec;\n    this.indexes = indexesObject;\n  }\n\n  _buildCommand() {\n    const options = this.options;\n    const name = this.name;\n    const indexes = this.indexes;\n\n    // merge all the options\n    for (let optionName in options) {\n      if (!keysToOmit.has(optionName)) {\n        indexes[optionName] = options[optionName];\n      }\n    }\n\n    // Create command, apply write concern to command\n    const cmd = { createIndexes: name, indexes: [indexes] };\n\n    return cmd;\n  }\n\n  execute(callback) {\n    const db = this.db;\n    const options = this.options;\n    const indexes = this.indexes;\n\n    // Get capabilities\n    const capabilities = db.s.topology.capabilities();\n\n    // Did the user pass in a collation, check if our write server supports it\n    if (options.collation && capabilities && !capabilities.commandsTakeCollation) {\n      // Create a new error\n      const error = new MongoError('server/primary/mongos does not support collation');\n      error.code = 67;\n      // Return the error\n      return callback(error);\n    }\n\n    // Ensure we have a callback\n    if (options.writeConcern && typeof callback !== 'function') {\n      throw MongoError.create({\n        message: 'Cannot use a writeConcern without a provided callback',\n        driver: true\n      });\n    }\n\n    // Attempt to run using createIndexes command\n    super.execute((err, result) => {\n      if (err == null) return handleCallback(callback, err, indexes.name);\n\n      return handleCallback(callback, err, result);\n    });\n  }\n}\n\ndefineAspects(CreateIndexOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = CreateIndexOperation;\n"]},"metadata":{},"sourceType":"script"}