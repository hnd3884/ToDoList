{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst ConnectionPool = require('../../cmap/connection_pool').ConnectionPool;\n\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\n\nconst MongoError = require('../error').MongoError;\n\nconst relayEvents = require('../utils').relayEvents;\n\nconst BSON = require('../connection/utils').retrieveBSON();\n\nconst Logger = require('../connection/logger');\n\nconst ServerDescription = require('./server_description').ServerDescription;\n\nconst ReadPreference = require('../topologies/read_preference');\n\nconst Monitor = require('./monitor').Monitor;\n\nconst MongoNetworkError = require('../error').MongoNetworkError;\n\nconst collationNotSupported = require('../utils').collationNotSupported;\n\nconst debugOptions = require('../connection/utils').debugOptions;\n\nconst isSDAMUnrecoverableError = require('../error').isSDAMUnrecoverableError;\n\nconst isNetworkTimeoutError = require('../error').isNetworkTimeoutError;\n\nconst isNodeShuttingDownError = require('../error').isNodeShuttingDownError;\n\nconst maxWireVersion = require('../utils').maxWireVersion;\n\nconst makeStateMachine = require('../utils').makeStateMachine;\n\nconst common = require('./common'); // Used for filtering out fields for logging\n\n\nconst DEBUG_FIELDS = ['reconnect', 'reconnectTries', 'reconnectInterval', 'emitError', 'cursorFactory', 'host', 'port', 'size', 'keepAlive', 'keepAliveInitialDelay', 'noDelay', 'connectionTimeout', 'checkServerIdentity', 'socketTimeout', 'ssl', 'ca', 'crl', 'cert', 'key', 'rejectUnauthorized', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'servername'];\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\nconst kMonitor = Symbol('monitor');\n/**\n *\n * @fires Server#serverHeartbeatStarted\n * @fires Server#serverHeartbeatSucceeded\n * @fires Server#serverHeartbeatFailed\n */\n\nclass Server extends EventEmitter {\n  /**\n   * Create a server\n   *\n   * @param {ServerDescription} description\n   * @param {Object} options\n   */\n  constructor(description, options, topology) {\n    super();\n    this.s = {\n      // the server description\n      description,\n      // a saved copy of the incoming options\n      options,\n      // the server logger\n      logger: Logger('Server', options),\n      // the bson parser\n      bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n      // the server state\n      state: STATE_CLOSED,\n      credentials: options.credentials,\n      topology\n    }; // create the connection pool\n    // NOTE: this used to happen in `connect`, we supported overriding pool options there\n\n    const addressParts = this.description.address.split(':');\n    const poolOptions = Object.assign({\n      host: addressParts[0],\n      port: parseInt(addressParts[1], 10),\n      bson: this.s.bson\n    }, options);\n    this.s.pool = new ConnectionPool(poolOptions);\n    relayEvents(this.s.pool, this, ['commandStarted', 'commandSucceeded', 'commandFailed'].concat(CMAP_EVENT_NAMES));\n    this.s.pool.on('clusterTimeReceived', clusterTime => {\n      this.clusterTime = clusterTime;\n    }); // create the monitor\n\n    this[kMonitor] = new Monitor(this, this.s.options);\n    relayEvents(this[kMonitor], this, ['serverHeartbeatStarted', 'serverHeartbeatSucceeded', 'serverHeartbeatFailed', // legacy events\n    'monitoring']);\n    this[kMonitor].on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n    this[kMonitor].on('resetServer', error => markServerUnknown(this, error));\n    this[kMonitor].on('serverHeartbeatSucceeded', event => {\n      this.emit('descriptionReceived', new ServerDescription(this.description.address, event.reply, {\n        roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n      }));\n\n      if (this.s.state === STATE_CONNECTING) {\n        stateTransition(this, STATE_CONNECTED);\n        this.emit('connect', this);\n      }\n    });\n  }\n\n  get description() {\n    return this.s.description;\n  }\n\n  get name() {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n\n    return null;\n  }\n  /**\n   * Initiate server connect\n   */\n\n\n  connect() {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n    this[kMonitor].connect();\n  }\n  /**\n   * Destroy the server connection\n   *\n   * @param {object} [options] Optional settings\n   * @param {Boolean} [options.force=false] Force destroy the pool\n   */\n\n\n  destroy(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = Object.assign({}, {\n      force: false\n    }, options);\n\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n    this[kMonitor].close();\n    this.s.pool.close(options, err => {\n      stateTransition(this, STATE_CLOSED);\n      this.emit('closed');\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n\n\n  requestCheck() {\n    this[kMonitor].requestCheck();\n  }\n  /**\n   * Execute a command\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {object} [options] Optional settings\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      callback = options, options = {}, options = options || {};\n    }\n\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoError('server is closed'));\n      return;\n    }\n\n    const error = basicReadValidations(this, options);\n\n    if (error) {\n      return callback(error);\n    } // Clone the options\n\n\n    options = Object.assign({}, options, {\n      wireProtocolCommand: false\n    }); // Debug log\n\n    if (this.s.logger.isDebug()) {\n      this.s.logger.debug(`executing command [${JSON.stringify({\n        ns,\n        cmd,\n        options: debugOptions(DEBUG_FIELDS, options)\n      })}] against ${this.name}`);\n    } // error if collation not supported\n\n\n    if (collationNotSupported(this, cmd)) {\n      callback(new MongoError(`server ${this.name} does not support collation`));\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.command(ns, cmd, options, makeOperationHandler(this, options, cb));\n    }, callback);\n  }\n  /**\n   * Execute a query against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command document for the query\n   * @param {object} options Optional settings\n   * @param {function} callback\n   */\n\n\n  query(ns, cmd, cursorState, options, callback) {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoError('server is closed'));\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.query(ns, cmd, cursorState, options, makeOperationHandler(this, options, cb));\n    }, callback);\n  }\n  /**\n   * Execute a `getMore` against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cursorState State data associated with the cursor calling this method\n   * @param {object} options Optional settings\n   * @param {function} callback\n   */\n\n\n  getMore(ns, cursorState, batchSize, options, callback) {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoError('server is closed'));\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.getMore(ns, cursorState, batchSize, options, makeOperationHandler(this, options, cb));\n    }, callback);\n  }\n  /**\n   * Execute a `killCursors` command against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cursorState State data associated with the cursor calling this method\n   * @param {function} callback\n   */\n\n\n  killCursors(ns, cursorState, callback) {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback(new MongoError('server is closed'));\n      }\n\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.killCursors(ns, cursorState, makeOperationHandler(this, null, cb));\n    }, callback);\n  }\n  /**\n   * Insert one or more documents\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of documents to insert\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({\n      server: this,\n      op: 'insert',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Perform one or more update operations\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  update(ns, ops, options, callback) {\n    executeWriteOperation({\n      server: this,\n      op: 'update',\n      ns,\n      ops\n    }, options, callback);\n  }\n  /**\n   * Perform one or more remove operations\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n\n\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({\n      server: this,\n      op: 'remove',\n      ns,\n      ops\n    }, options, callback);\n  }\n\n}\n\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  get: function () {\n    return this.s.topology.clusterTime;\n  },\n  set: function (clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n});\n\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction basicReadValidations(server, options) {\n  if (options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    return new MongoError('readPreference must be an instance of ReadPreference');\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.\n\n  const server = args.server;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = Array.isArray(args.ops) ? args.ops : [args.ops];\n\n  if (server.s.state === STATE_CLOSING || server.s.state === STATE_CLOSED) {\n    callback(new MongoError('server is closed'));\n    return;\n  }\n\n  if (collationNotSupported(server, options)) {\n    callback(new MongoError(`server ${server.name} does not support collation`));\n    return;\n  }\n\n  server.s.pool.withConnection((err, conn, cb) => {\n    if (err) {\n      markServerUnknown(server, err);\n      return cb(err);\n    }\n\n    conn[op](ns, ops, options, makeOperationHandler(server, options, cb));\n  }, callback);\n}\n\nfunction markServerUnknown(server, error) {\n  server.emit('descriptionReceived', new ServerDescription(server.description.address, null, {\n    error\n  }));\n}\n\nfunction makeOperationHandler(server, options, callback) {\n  const session = options && options.session;\n  return function handleOperationResult(err, result) {\n    if (err) {\n      if (err instanceof MongoNetworkError) {\n        if (session && !session.hasEnded) {\n          session.serverSession.isDirty = true;\n        }\n\n        if (!isNetworkTimeoutError(err)) {\n          markServerUnknown(server, err);\n          server.s.pool.clear();\n        }\n      } else if (isSDAMUnrecoverableError(err)) {\n        if (maxWireVersion(server) <= 7 || isNodeShuttingDownError(err)) {\n          server.s.pool.clear();\n        }\n\n        markServerUnknown(server, err);\n        process.nextTick(() => server.requestCheck());\n      }\n    }\n\n    callback(err, result);\n  };\n}\n\nmodule.exports = {\n  Server\n};","map":{"version":3,"sources":["/home/hoangnd/source/ReactJS/todolist/node_modules/mongodb/lib/core/sdam/server.js"],"names":["EventEmitter","require","ConnectionPool","CMAP_EVENT_NAMES","MongoError","relayEvents","BSON","retrieveBSON","Logger","ServerDescription","ReadPreference","Monitor","MongoNetworkError","collationNotSupported","debugOptions","isSDAMUnrecoverableError","isNetworkTimeoutError","isNodeShuttingDownError","maxWireVersion","makeStateMachine","common","DEBUG_FIELDS","STATE_CLOSING","STATE_CLOSED","STATE_CONNECTING","STATE_CONNECTED","stateTransition","kMonitor","Symbol","Server","constructor","description","options","topology","s","logger","bson","Binary","Code","DBRef","Decimal128","Double","Int32","Long","Map","MaxKey","MinKey","ObjectId","BSONRegExp","Timestamp","state","credentials","addressParts","address","split","poolOptions","Object","assign","host","port","parseInt","pool","concat","on","clusterTime","clear","error","markServerUnknown","event","emit","reply","roundTripTime","calculateRoundTripTime","duration","name","autoEncrypter","connect","destroy","callback","force","close","err","requestCheck","command","ns","cmd","basicReadValidations","wireProtocolCommand","isDebug","debug","JSON","stringify","withConnection","conn","cb","makeOperationHandler","query","cursorState","getMore","batchSize","killCursors","insert","ops","executeWriteOperation","server","op","update","remove","defineProperty","prototype","get","set","oldRtt","alpha","readPreference","args","Array","isArray","session","handleOperationResult","result","hasEnded","serverSession","isDirty","process","nextTick","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst EventEmitter = require('events');\nconst ConnectionPool = require('../../cmap/connection_pool').ConnectionPool;\nconst CMAP_EVENT_NAMES = require('../../cmap/events').CMAP_EVENT_NAMES;\nconst MongoError = require('../error').MongoError;\nconst relayEvents = require('../utils').relayEvents;\nconst BSON = require('../connection/utils').retrieveBSON();\nconst Logger = require('../connection/logger');\nconst ServerDescription = require('./server_description').ServerDescription;\nconst ReadPreference = require('../topologies/read_preference');\nconst Monitor = require('./monitor').Monitor;\nconst MongoNetworkError = require('../error').MongoNetworkError;\nconst collationNotSupported = require('../utils').collationNotSupported;\nconst debugOptions = require('../connection/utils').debugOptions;\nconst isSDAMUnrecoverableError = require('../error').isSDAMUnrecoverableError;\nconst isNetworkTimeoutError = require('../error').isNetworkTimeoutError;\nconst isNodeShuttingDownError = require('../error').isNodeShuttingDownError;\nconst maxWireVersion = require('../utils').maxWireVersion;\nconst makeStateMachine = require('../utils').makeStateMachine;\nconst common = require('./common');\n\n// Used for filtering out fields for logging\nconst DEBUG_FIELDS = [\n  'reconnect',\n  'reconnectTries',\n  'reconnectInterval',\n  'emitError',\n  'cursorFactory',\n  'host',\n  'port',\n  'size',\n  'keepAlive',\n  'keepAliveInitialDelay',\n  'noDelay',\n  'connectionTimeout',\n  'checkServerIdentity',\n  'socketTimeout',\n  'ssl',\n  'ca',\n  'crl',\n  'cert',\n  'key',\n  'rejectUnauthorized',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'servername'\n];\n\nconst STATE_CLOSING = common.STATE_CLOSING;\nconst STATE_CLOSED = common.STATE_CLOSED;\nconst STATE_CONNECTING = common.STATE_CONNECTING;\nconst STATE_CONNECTED = common.STATE_CONNECTED;\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\nconst kMonitor = Symbol('monitor');\n\n/**\n *\n * @fires Server#serverHeartbeatStarted\n * @fires Server#serverHeartbeatSucceeded\n * @fires Server#serverHeartbeatFailed\n */\nclass Server extends EventEmitter {\n  /**\n   * Create a server\n   *\n   * @param {ServerDescription} description\n   * @param {Object} options\n   */\n  constructor(description, options, topology) {\n    super();\n\n    this.s = {\n      // the server description\n      description,\n      // a saved copy of the incoming options\n      options,\n      // the server logger\n      logger: Logger('Server', options),\n      // the bson parser\n      bson:\n        options.bson ||\n        new BSON([\n          BSON.Binary,\n          BSON.Code,\n          BSON.DBRef,\n          BSON.Decimal128,\n          BSON.Double,\n          BSON.Int32,\n          BSON.Long,\n          BSON.Map,\n          BSON.MaxKey,\n          BSON.MinKey,\n          BSON.ObjectId,\n          BSON.BSONRegExp,\n          BSON.Symbol,\n          BSON.Timestamp\n        ]),\n      // the server state\n      state: STATE_CLOSED,\n      credentials: options.credentials,\n      topology\n    };\n\n    // create the connection pool\n    // NOTE: this used to happen in `connect`, we supported overriding pool options there\n    const addressParts = this.description.address.split(':');\n    const poolOptions = Object.assign(\n      { host: addressParts[0], port: parseInt(addressParts[1], 10), bson: this.s.bson },\n      options\n    );\n\n    this.s.pool = new ConnectionPool(poolOptions);\n    relayEvents(\n      this.s.pool,\n      this,\n      ['commandStarted', 'commandSucceeded', 'commandFailed'].concat(CMAP_EVENT_NAMES)\n    );\n\n    this.s.pool.on('clusterTimeReceived', clusterTime => {\n      this.clusterTime = clusterTime;\n    });\n\n    // create the monitor\n    this[kMonitor] = new Monitor(this, this.s.options);\n    relayEvents(this[kMonitor], this, [\n      'serverHeartbeatStarted',\n      'serverHeartbeatSucceeded',\n      'serverHeartbeatFailed',\n\n      // legacy events\n      'monitoring'\n    ]);\n\n    this[kMonitor].on('resetConnectionPool', () => {\n      this.s.pool.clear();\n    });\n\n    this[kMonitor].on('resetServer', error => markServerUnknown(this, error));\n    this[kMonitor].on('serverHeartbeatSucceeded', event => {\n      this.emit(\n        'descriptionReceived',\n        new ServerDescription(this.description.address, event.reply, {\n          roundTripTime: calculateRoundTripTime(this.description.roundTripTime, event.duration)\n        })\n      );\n\n      if (this.s.state === STATE_CONNECTING) {\n        stateTransition(this, STATE_CONNECTED);\n        this.emit('connect', this);\n      }\n    });\n  }\n\n  get description() {\n    return this.s.description;\n  }\n\n  get name() {\n    return this.s.description.address;\n  }\n\n  get autoEncrypter() {\n    if (this.s.options && this.s.options.autoEncrypter) {\n      return this.s.options.autoEncrypter;\n    }\n    return null;\n  }\n\n  /**\n   * Initiate server connect\n   */\n  connect() {\n    if (this.s.state !== STATE_CLOSED) {\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n    this[kMonitor].connect();\n  }\n\n  /**\n   * Destroy the server connection\n   *\n   * @param {object} [options] Optional settings\n   * @param {Boolean} [options.force=false] Force destroy the pool\n   */\n  destroy(options, callback) {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = Object.assign({}, { force: false }, options);\n\n    if (this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    this[kMonitor].close();\n    this.s.pool.close(options, err => {\n      stateTransition(this, STATE_CLOSED);\n      this.emit('closed');\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n\n  /**\n   * Immediately schedule monitoring of this server. If there already an attempt being made\n   * this will be a no-op.\n   */\n  requestCheck() {\n    this[kMonitor].requestCheck();\n  }\n\n  /**\n   * Execute a command\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command hash\n   * @param {object} [options] Optional settings\n   * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.checkKeys=false] Specify if the bson parser should validate keys.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {Boolean} [options.fullResult=false] Return the full envelope instead of just the result document.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  command(ns, cmd, options, callback) {\n    if (typeof options === 'function') {\n      (callback = options), (options = {}), (options = options || {});\n    }\n\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoError('server is closed'));\n      return;\n    }\n\n    const error = basicReadValidations(this, options);\n    if (error) {\n      return callback(error);\n    }\n\n    // Clone the options\n    options = Object.assign({}, options, { wireProtocolCommand: false });\n\n    // Debug log\n    if (this.s.logger.isDebug()) {\n      this.s.logger.debug(\n        `executing command [${JSON.stringify({\n          ns,\n          cmd,\n          options: debugOptions(DEBUG_FIELDS, options)\n        })}] against ${this.name}`\n      );\n    }\n\n    // error if collation not supported\n    if (collationNotSupported(this, cmd)) {\n      callback(new MongoError(`server ${this.name} does not support collation`));\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.command(ns, cmd, options, makeOperationHandler(this, options, cb));\n    }, callback);\n  }\n\n  /**\n   * Execute a query against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cmd The command document for the query\n   * @param {object} options Optional settings\n   * @param {function} callback\n   */\n  query(ns, cmd, cursorState, options, callback) {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoError('server is closed'));\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.query(ns, cmd, cursorState, options, makeOperationHandler(this, options, cb));\n    }, callback);\n  }\n\n  /**\n   * Execute a `getMore` against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cursorState State data associated with the cursor calling this method\n   * @param {object} options Optional settings\n   * @param {function} callback\n   */\n  getMore(ns, cursorState, batchSize, options, callback) {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      callback(new MongoError('server is closed'));\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.getMore(ns, cursorState, batchSize, options, makeOperationHandler(this, options, cb));\n    }, callback);\n  }\n\n  /**\n   * Execute a `killCursors` command against the server\n   *\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {object} cursorState State data associated with the cursor calling this method\n   * @param {function} callback\n   */\n  killCursors(ns, cursorState, callback) {\n    if (this.s.state === STATE_CLOSING || this.s.state === STATE_CLOSED) {\n      if (typeof callback === 'function') {\n        callback(new MongoError('server is closed'));\n      }\n\n      return;\n    }\n\n    this.s.pool.withConnection((err, conn, cb) => {\n      if (err) {\n        markServerUnknown(this, err);\n        return cb(err);\n      }\n\n      conn.killCursors(ns, cursorState, makeOperationHandler(this, null, cb));\n    }, callback);\n  }\n\n  /**\n   * Insert one or more documents\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of documents to insert\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  insert(ns, ops, options, callback) {\n    executeWriteOperation({ server: this, op: 'insert', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more update operations\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of updates\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  update(ns, ops, options, callback) {\n    executeWriteOperation({ server: this, op: 'update', ns, ops }, options, callback);\n  }\n\n  /**\n   * Perform one or more remove operations\n   * @method\n   * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n   * @param {array} ops An array of removes\n   * @param {boolean} [options.ordered=true] Execute in order or out of order\n   * @param {object} [options.writeConcern={}] Write concern for the operation\n   * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n   * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n   * @param {ClientSession} [options.session] Session to use for the operation\n   * @param {opResultCallback} callback A callback function\n   */\n  remove(ns, ops, options, callback) {\n    executeWriteOperation({ server: this, op: 'remove', ns, ops }, options, callback);\n  }\n}\n\nObject.defineProperty(Server.prototype, 'clusterTime', {\n  get: function() {\n    return this.s.topology.clusterTime;\n  },\n  set: function(clusterTime) {\n    this.s.topology.clusterTime = clusterTime;\n  }\n});\n\nfunction calculateRoundTripTime(oldRtt, duration) {\n  if (oldRtt === -1) {\n    return duration;\n  }\n\n  const alpha = 0.2;\n  return alpha * duration + (1 - alpha) * oldRtt;\n}\n\nfunction basicReadValidations(server, options) {\n  if (options.readPreference && !(options.readPreference instanceof ReadPreference)) {\n    return new MongoError('readPreference must be an instance of ReadPreference');\n  }\n}\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const server = args.server;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = Array.isArray(args.ops) ? args.ops : [args.ops];\n\n  if (server.s.state === STATE_CLOSING || server.s.state === STATE_CLOSED) {\n    callback(new MongoError('server is closed'));\n    return;\n  }\n\n  if (collationNotSupported(server, options)) {\n    callback(new MongoError(`server ${server.name} does not support collation`));\n    return;\n  }\n\n  server.s.pool.withConnection((err, conn, cb) => {\n    if (err) {\n      markServerUnknown(server, err);\n      return cb(err);\n    }\n\n    conn[op](ns, ops, options, makeOperationHandler(server, options, cb));\n  }, callback);\n}\n\nfunction markServerUnknown(server, error) {\n  server.emit(\n    'descriptionReceived',\n    new ServerDescription(server.description.address, null, { error })\n  );\n}\n\nfunction makeOperationHandler(server, options, callback) {\n  const session = options && options.session;\n\n  return function handleOperationResult(err, result) {\n    if (err) {\n      if (err instanceof MongoNetworkError) {\n        if (session && !session.hasEnded) {\n          session.serverSession.isDirty = true;\n        }\n\n        if (!isNetworkTimeoutError(err)) {\n          markServerUnknown(server, err);\n          server.s.pool.clear();\n        }\n      } else if (isSDAMUnrecoverableError(err)) {\n        if (maxWireVersion(server) <= 7 || isNodeShuttingDownError(err)) {\n          server.s.pool.clear();\n        }\n\n        markServerUnknown(server, err);\n        process.nextTick(() => server.requestCheck());\n      }\n    }\n\n    callback(err, result);\n  };\n}\n\nmodule.exports = {\n  Server\n};\n"]},"metadata":{},"sourceType":"script"}