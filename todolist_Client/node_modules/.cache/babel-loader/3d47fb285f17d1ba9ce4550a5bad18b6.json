{"ast":null,"code":"'use strict';\n\nconst ChangeStream = require('./change_stream');\n\nconst Db = require('./db');\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst inherits = require('util').inherits;\n\nconst MongoError = require('./core').MongoError;\n\nconst deprecate = require('util').deprecate;\n\nconst WriteConcern = require('./write_concern');\n\nconst MongoDBNamespace = require('./utils').MongoDBNamespace;\n\nconst ReadPreference = require('./core/topologies/read_preference');\n\nconst maybePromise = require('./utils').maybePromise;\n\nconst NativeTopology = require('./topologies/native_topology');\n\nconst connect = require('./operations/connect').connect;\n\nconst validOptions = require('./operations/connect').validOptions;\n/**\n * @fileOverview The **MongoClient** class is a class that allows for making Connections to MongoDB.\n *\n * @example\n * // Connect using a MongoClient instance\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * const mongoClient = new MongoClient(url);\n * mongoClient.connect(function(err, client) {\n *   const db = client.db(dbName);\n *   client.close();\n * });\n *\n * @example\n * // Connect using the MongoClient.connect static method\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   const db = client.db(dbName);\n *   client.close();\n * });\n */\n\n/**\n * A string specifying the level of a ReadConcern\n * @typedef {'local'|'available'|'majority'|'linearizable'|'snapshot'} ReadConcernLevel\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html#read-concern-levels\n */\n\n/**\n * Configuration options for drivers wrapping the node driver.\n *\n * @typedef {Object} DriverInfoOptions\n * @property {string} [name] The name of the driver\n * @property {string} [version] The version of the driver\n * @property {string} [platform] Optional platform information\n */\n\n/**\n * Configuration options for drivers wrapping the node driver.\n *\n * @typedef {Object} DriverInfoOptions\n * @property {string} [name] The name of the driver\n * @property {string} [version] The version of the driver\n * @property {string} [platform] Optional platform information\n */\n\n/**\n * Creates a new MongoClient instance\n * @class\n * @param {string} url The connection URI string\n * @param {object} [options] Optional settings\n * @param {number} [options.poolSize=5] The maximum size of the individual server pool\n * @param {boolean} [options.ssl=false] Enable SSL connection. *deprecated* use `tls` variants\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against Certificate Authority\n * @param {buffer} [options.sslCA=undefined] SSL Certificate store binary buffer *deprecated* use `tls` variants\n * @param {buffer} [options.sslCert=undefined] SSL Certificate binary buffer *deprecated* use `tls` variants\n * @param {buffer} [options.sslKey=undefined] SSL Key file binary buffer *deprecated* use `tls` variants\n * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase *deprecated* use `tls` variants\n * @param {buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer *deprecated* use `tls` variants\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function. *deprecated* use `tls` variants\n * @param {boolean} [options.tls=false] Enable TLS connections\n * @param {boolean} [options.tlsInsecure=false] Relax TLS constraints, disabling validation\n * @param {string} [options.tlsCAFile] A path to file with either a single or bundle of certificate authorities to be considered trusted when making a TLS connection\n * @param {string} [options.tlsCertificateKeyFile] A path to the client certificate file or the client private key file; in the case that they both are needed, the files should be concatenated\n * @param {string} [options.tlsCertificateKeyFilePassword] The password to decrypt the client private key to be used for TLS connections\n * @param {boolean} [options.tlsAllowInvalidCertificates] Specifies whether or not the driver should error when the server’s TLS certificate is invalid\n * @param {boolean} [options.tlsAllowInvalidHostnames] Specifies whether or not the driver should error when there is a mismatch between the server’s hostname and the hostname specified by the TLS certificate\n * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out\n * @param {number} [options.socketTimeoutMS=360000] How long a send or receive on a socket can take before timing out\n * @param {number} [options.family] Version of IP stack. Can be 4, 6 or null (default).\n * If null, will attempt to connect with IPv6, and will fall back to IPv4 on failure\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {string} [options.replicaSet=undefined] The Replicaset set name\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {string} [options.authSource=undefined] Define the database to authenticate against\n * @param {(number|string)} [options.w] The write concern\n * @param {number} [options.wtimeout] The write concern timeout\n * @param {boolean} [options.j=false] Specify a journal write concern\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern] Specify a read concern for the collection (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed)\n * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)\n * @param {object} [options.logger=undefined] Custom logger object\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers\n * @param {boolean} [options.promoteLongs=true] Promotes long values to number if they fit inside the 53 bits resolution\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit\n * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness\n * @param {string} [options.appname=undefined] The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections\n * @param {string} [options.auth.user=undefined] The username for auth\n * @param {string} [options.auth.password=undefined] The password for auth\n * @param {string} [options.authMechanism=undefined] Mechanism for authentication: MDEFAULT, GSSAPI, PLAIN, MONGODB-X509, or SCRAM-SHA-1\n * @param {object} [options.compression] Type of compression to use: snappy or zlib\n * @param {boolean} [options.fsync=false] Specify a file sync write concern\n * @param {array} [options.readPreferenceTags] Read preference tags\n * @param {number} [options.numberOfRetries=5] The number of retries for a tailable cursor\n * @param {boolean} [options.auto_reconnect=true] Enable auto reconnecting for single server instances\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this client\n * @param {number} [options.minSize] If present, the connection pool will be initialized with minSize connections, and will never dip below minSize connections\n * @param {boolean} [options.useNewUrlParser=true] Determines whether or not to use the new url parser. Enables the new, spec-compliant, url parser shipped in the core driver. This url parser fixes a number of problems with the original parser, and aims to outright replace that parser in the near future. Defaults to true, and must be explicitly set to false to use the legacy url parser.\n * @param {boolean} [options.useUnifiedTopology] Enables the new unified topology layer\n * @param {Number} [options.localThresholdMS=15] **Only applies to the unified topology** The size of the latency window for selecting among multiple suitable servers\n * @param {Number} [options.serverSelectionTimeoutMS=30000] **Only applies to the unified topology** How long to block for server selection before throwing an error\n * @param {Number} [options.heartbeatFrequencyMS=10000] **Only applies to the unified topology** The frequency with which topology updates are scheduled\n * @param {number} [options.maxPoolSize=10] **Only applies to the unified topology** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections.\n * @param {number} [options.minPoolSize=0] **Only applies to the unified topology** The minimum number of connections that MUST exist at any moment in a single connection pool.\n * @param {number} [options.maxIdleTimeMS] **Only applies to the unified topology** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. The default is infinity.\n * @param {number} [options.waitQueueTimeoutMS=0] **Only applies to the unified topology** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit.\n * @param {AutoEncrypter~AutoEncryptionOptions} [options.autoEncryption] Optionally enable client side auto encryption\n * @param {DriverInfoOptions} [options.driverInfo] Allows a wrapping driver to amend the client metadata generated by the driver to include information about the wrapping driver\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {MongoClient} a MongoClient instance\n */\n\n\nfunction MongoClient(url, options) {\n  if (!(this instanceof MongoClient)) return new MongoClient(url, options); // Set up event emitter\n\n  EventEmitter.call(this); // The internal state\n\n  this.s = {\n    url: url,\n    options: options || {},\n    promiseLibrary: options && options.promiseLibrary || Promise,\n    dbCache: new Map(),\n    sessions: new Set(),\n    writeConcern: WriteConcern.fromOptions(options),\n    namespace: new MongoDBNamespace('admin')\n  };\n}\n/**\n * @ignore\n */\n\n\ninherits(MongoClient, EventEmitter);\nObject.defineProperty(MongoClient.prototype, 'writeConcern', {\n  enumerable: true,\n  get: function () {\n    return this.s.writeConcern;\n  }\n});\nObject.defineProperty(MongoClient.prototype, 'readPreference', {\n  enumerable: true,\n  get: function () {\n    return ReadPreference.primary;\n  }\n});\n/**\n * The callback format for results\n * @callback MongoClient~connectCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {MongoClient} client The connected client.\n */\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {Promise<MongoClient>} returns Promise if no callback passed\n */\n\nMongoClient.prototype.connect = function (callback) {\n  if (typeof callback === 'string') {\n    throw new TypeError('`connect` only accepts a callback');\n  }\n\n  const client = this;\n  return maybePromise(this, callback, cb => {\n    const err = validOptions(client.s.options);\n    if (err) return cb(err);\n    connect(client, client.s.url, client.s.options, err => {\n      if (err) return cb(err);\n      cb(null, client);\n    });\n  });\n};\n\nMongoClient.prototype.logout = deprecate(function (options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  if (typeof callback === 'function') callback(null, true);\n}, 'Multiple authentication is prohibited on a connected client, please only authenticate once per MongoClient');\n/**\n * Close the db and its underlying connections\n * @method\n * @param {boolean} [force=false] Force close, emitting no events\n * @param {Db~noResultCallback} [callback] The result callback\n * @return {Promise} returns Promise if no callback passed\n */\n\nMongoClient.prototype.close = function (force, callback) {\n  if (typeof force === 'function') {\n    callback = force;\n    force = false;\n  }\n\n  const client = this;\n  return maybePromise(this, callback, cb => {\n    const completeClose = err => {\n      client.emit('close', client);\n\n      if (!(client.topology instanceof NativeTopology)) {\n        for (const item of client.s.dbCache) {\n          item[1].emit('close', client);\n        }\n      }\n\n      client.removeAllListeners('close');\n      cb(err);\n    };\n\n    if (client.topology == null) {\n      completeClose();\n      return;\n    }\n\n    client.topology.close(force, err => {\n      const autoEncrypter = client.topology.s.options.autoEncrypter;\n\n      if (!autoEncrypter) {\n        completeClose(err);\n        return;\n      }\n\n      autoEncrypter.teardown(force, err2 => completeClose(err || err2));\n    });\n  });\n};\n/**\n * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n * You can control these behaviors with the options noListener and returnNonCachedInstance.\n *\n * @method\n * @param {string} [dbName] The name of the database we want to use. If not provided, use database name from connection string.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.\n * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created\n * @return {Db}\n */\n\n\nMongoClient.prototype.db = function (dbName, options) {\n  options = options || {}; // Default to db from connection string if not provided\n\n  if (!dbName) {\n    dbName = this.s.options.dbName;\n  } // Copy the options and add out internal override of the not shared flag\n\n\n  const finalOptions = Object.assign({}, this.s.options, options); // Do we have the db in the cache already\n\n  if (this.s.dbCache.has(dbName) && finalOptions.returnNonCachedInstance !== true) {\n    return this.s.dbCache.get(dbName);\n  } // Add promiseLibrary\n\n\n  finalOptions.promiseLibrary = this.s.promiseLibrary; // If no topology throw an error message\n\n  if (!this.topology) {\n    throw new MongoError('MongoClient must be connected before calling MongoClient.prototype.db');\n  } // Return the db object\n\n\n  const db = new Db(dbName, this.topology, finalOptions); // Add the db to the cache\n\n  this.s.dbCache.set(dbName, db); // Return the database\n\n  return db;\n};\n/**\n * Check if MongoClient is connected\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.\n * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created\n * @return {boolean}\n */\n\n\nMongoClient.prototype.isConnected = function (options) {\n  options = options || {};\n  if (!this.topology) return false;\n  return this.topology.isConnected(options);\n};\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @static\n * @param {string} url The connection URI string\n * @param {object} [options] Optional settings\n * @param {number} [options.poolSize=5] The maximum size of the individual server pool\n * @param {boolean} [options.ssl=false] Enable SSL connection. *deprecated* use `tls` variants\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against Certificate Authority\n * @param {buffer} [options.sslCA=undefined] SSL Certificate store binary buffer *deprecated* use `tls` variants\n * @param {buffer} [options.sslCert=undefined] SSL Certificate binary buffer *deprecated* use `tls` variants\n * @param {buffer} [options.sslKey=undefined] SSL Key file binary buffer *deprecated* use `tls` variants\n * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase *deprecated* use `tls` variants\n * @param {buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer *deprecated* use `tls` variants\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function. *deprecated* use `tls` variants\n * @param {boolean} [options.tls=false] Enable TLS connections\n * @param {boolean} [options.tlsInsecure=false] Relax TLS constraints, disabling validation\n * @param {string} [options.tlsCAFile] A path to file with either a single or bundle of certificate authorities to be considered trusted when making a TLS connection\n * @param {string} [options.tlsCertificateKeyFile] A path to the client certificate file or the client private key file; in the case that they both are needed, the files should be concatenated\n * @param {string} [options.tlsCertificateKeyFilePassword] The password to decrypt the client private key to be used for TLS connections\n * @param {boolean} [options.tlsAllowInvalidCertificates] Specifies whether or not the driver should error when the server’s TLS certificate is invalid\n * @param {boolean} [options.tlsAllowInvalidHostnames] Specifies whether or not the driver should error when there is a mismatch between the server’s hostname and the hostname specified by the TLS certificate\n * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out\n * @param {number} [options.socketTimeoutMS=360000] How long a send or receive on a socket can take before timing out\n * @param {number} [options.family] Version of IP stack. Can be 4, 6 or null (default).\n * If null, will attempt to connect with IPv6, and will fall back to IPv4 on failure\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {string} [options.replicaSet=undefined] The Replicaset set name\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {string} [options.authSource=undefined] Define the database to authenticate against\n * @param {(number|string)} [options.w] The write concern\n * @param {number} [options.wtimeout] The write concern timeout\n * @param {boolean} [options.j=false] Specify a journal write concern\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern] Specify a read concern for the collection (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed)\n * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)\n * @param {object} [options.logger=undefined] Custom logger object\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers\n * @param {boolean} [options.promoteLongs=true] Promotes long values to number if they fit inside the 53 bits resolution\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit\n * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness\n * @param {string} [options.appname=undefined] The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections\n * @param {string} [options.auth.user=undefined] The username for auth\n * @param {string} [options.auth.password=undefined] The password for auth\n * @param {string} [options.authMechanism=undefined] Mechanism for authentication: MDEFAULT, GSSAPI, PLAIN, MONGODB-X509, or SCRAM-SHA-1\n * @param {object} [options.compression] Type of compression to use: snappy or zlib\n * @param {boolean} [options.fsync=false] Specify a file sync write concern\n * @param {array} [options.readPreferenceTags] Read preference tags\n * @param {number} [options.numberOfRetries=5] The number of retries for a tailable cursor\n * @param {boolean} [options.auto_reconnect=true] Enable auto reconnecting for single server instances\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this client\n * @param {number} [options.minSize] If present, the connection pool will be initialized with minSize connections, and will never dip below minSize connections\n * @param {boolean} [options.useNewUrlParser=true] Determines whether or not to use the new url parser. Enables the new, spec-compliant, url parser shipped in the core driver. This url parser fixes a number of problems with the original parser, and aims to outright replace that parser in the near future. Defaults to true, and must be explicitly set to false to use the legacy url parser.\n * @param {boolean} [options.useUnifiedTopology] Enables the new unified topology layer\n * @param {Number} [options.localThresholdMS=15] **Only applies to the unified topology** The size of the latency window for selecting among multiple suitable servers\n * @param {Number} [options.serverSelectionTimeoutMS=30000] **Only applies to the unified topology** How long to block for server selection before throwing an error\n * @param {Number} [options.heartbeatFrequencyMS=10000] **Only applies to the unified topology** The frequency with which topology updates are scheduled\n * @param {number} [options.maxPoolSize=10] **Only applies to the unified topology** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections.\n * @param {number} [options.minPoolSize=0] **Only applies to the unified topology** The minimum number of connections that MUST exist at any moment in a single connection pool.\n * @param {number} [options.maxIdleTimeMS] **Only applies to the unified topology** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. The default is infinity.\n * @param {number} [options.waitQueueTimeoutMS=0] **Only applies to the unified topology** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit.\n * @param {AutoEncrypter~AutoEncryptionOptions} [options.autoEncryption] Optionally enable client side auto encryption\n * @param {DriverInfoOptions} [options.driverInfo] Allows a wrapping driver to amend the client metadata generated by the driver to include information about the wrapping driver\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {Promise<MongoClient>} returns Promise if no callback passed\n */\n\n\nMongoClient.connect = function (url, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() : null;\n  options = options || {}; // Create client\n\n  const mongoClient = new MongoClient(url, options); // Execute the connect method\n\n  return mongoClient.connect(callback);\n};\n/**\n * Starts a new session on the server\n *\n * @param {SessionOptions} [options] optional settings for a driver session\n * @return {ClientSession} the newly established session\n */\n\n\nMongoClient.prototype.startSession = function (options) {\n  options = Object.assign({\n    explicit: true\n  }, options);\n\n  if (!this.topology) {\n    throw new MongoError('Must connect to a server before calling this method');\n  }\n\n  if (!this.topology.hasSessionSupport()) {\n    throw new MongoError('Current topology does not support sessions');\n  }\n\n  return this.topology.startSession(options, this.s.options);\n};\n/**\n * Runs a given operation with an implicitly created session. The lifetime of the session\n * will be handled without the need for user interaction.\n *\n * NOTE: presently the operation MUST return a Promise (either explicit or implicity as an async function)\n *\n * @param {Object} [options] Optional settings to be appled to implicitly created session\n * @param {Function} operation An operation to execute with an implicitly created session. The signature of this MUST be `(session) => {}`\n * @return {Promise}\n */\n\n\nMongoClient.prototype.withSession = function (options, operation) {\n  if (typeof options === 'function') operation = options, options = undefined;\n  const session = this.startSession(options);\n\n  let cleanupHandler = (err, result, opts) => {\n    // prevent multiple calls to cleanupHandler\n    cleanupHandler = () => {\n      throw new ReferenceError('cleanupHandler was called too many times');\n    };\n\n    opts = Object.assign({\n      throw: true\n    }, opts);\n    session.endSession();\n\n    if (err) {\n      if (opts.throw) throw err;\n      return Promise.reject(err);\n    }\n  };\n\n  try {\n    const result = operation(session);\n    return Promise.resolve(result).then(result => cleanupHandler(null, result)).catch(err => cleanupHandler(err, null, {\n      throw: true\n    }));\n  } catch (err) {\n    return cleanupHandler(err, null, {\n      throw: false\n    });\n  }\n};\n/**\n * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this cluster. Will ignore all changes to system collections, as well as the local, admin,\n * and config databases.\n * @method\n * @since 3.1.0\n * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n * @param {object} [options] Optional settings\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {ReadPreference} [options.readPreference] The read preference. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {ChangeStream} a ChangeStream instance.\n */\n\n\nMongoClient.prototype.watch = function (pipeline, options) {\n  pipeline = pipeline || [];\n  options = options || {}; // Allow optionally not specifying a pipeline\n\n  if (!Array.isArray(pipeline)) {\n    options = pipeline;\n    pipeline = [];\n  }\n\n  return new ChangeStream(this, pipeline, options);\n};\n/**\n * Return the mongo client logger\n * @method\n * @return {Logger} return the mongo client logger\n * @ignore\n */\n\n\nMongoClient.prototype.getLogger = function () {\n  return this.s.options.logger;\n};\n\nmodule.exports = MongoClient;","map":{"version":3,"sources":["/home/hoangnd/source/ReactJS/todolist/node_modules/mongodb/lib/mongo_client.js"],"names":["ChangeStream","require","Db","EventEmitter","inherits","MongoError","deprecate","WriteConcern","MongoDBNamespace","ReadPreference","maybePromise","NativeTopology","connect","validOptions","MongoClient","url","options","call","s","promiseLibrary","Promise","dbCache","Map","sessions","Set","writeConcern","fromOptions","namespace","Object","defineProperty","prototype","enumerable","get","primary","callback","TypeError","client","cb","err","logout","close","force","completeClose","emit","topology","item","removeAllListeners","autoEncrypter","teardown","err2","db","dbName","finalOptions","assign","has","returnNonCachedInstance","set","isConnected","args","Array","slice","arguments","length","pop","undefined","shift","mongoClient","startSession","explicit","hasSessionSupport","withSession","operation","session","cleanupHandler","result","opts","ReferenceError","throw","endSession","reject","resolve","then","catch","watch","pipeline","isArray","getLogger","logger","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,MAAME,YAAY,GAAGF,OAAO,CAAC,QAAD,CAAP,CAAkBE,YAAvC;;AACA,MAAMC,QAAQ,GAAGH,OAAO,CAAC,MAAD,CAAP,CAAgBG,QAAjC;;AACA,MAAMC,UAAU,GAAGJ,OAAO,CAAC,QAAD,CAAP,CAAkBI,UAArC;;AACA,MAAMC,SAAS,GAAGL,OAAO,CAAC,MAAD,CAAP,CAAgBK,SAAlC;;AACA,MAAMC,YAAY,GAAGN,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAMO,gBAAgB,GAAGP,OAAO,CAAC,SAAD,CAAP,CAAmBO,gBAA5C;;AACA,MAAMC,cAAc,GAAGR,OAAO,CAAC,mCAAD,CAA9B;;AACA,MAAMS,YAAY,GAAGT,OAAO,CAAC,SAAD,CAAP,CAAmBS,YAAxC;;AACA,MAAMC,cAAc,GAAGV,OAAO,CAAC,8BAAD,CAA9B;;AACA,MAAMW,OAAO,GAAGX,OAAO,CAAC,sBAAD,CAAP,CAAgCW,OAAhD;;AACA,MAAMC,YAAY,GAAGZ,OAAO,CAAC,sBAAD,CAAP,CAAgCY,YAArD;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;;;;;AAMA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA,SAASC,WAAT,CAAqBC,GAArB,EAA0BC,OAA1B,EAAmC;AACjC,MAAI,EAAE,gBAAgBF,WAAlB,CAAJ,EAAoC,OAAO,IAAIA,WAAJ,CAAgBC,GAAhB,EAAqBC,OAArB,CAAP,CADH,CAEjC;;AACAb,EAAAA,YAAY,CAACc,IAAb,CAAkB,IAAlB,EAHiC,CAKjC;;AACA,OAAKC,CAAL,GAAS;AACPH,IAAAA,GAAG,EAAEA,GADE;AAEPC,IAAAA,OAAO,EAAEA,OAAO,IAAI,EAFb;AAGPG,IAAAA,cAAc,EAAGH,OAAO,IAAIA,OAAO,CAACG,cAApB,IAAuCC,OAHhD;AAIPC,IAAAA,OAAO,EAAE,IAAIC,GAAJ,EAJF;AAKPC,IAAAA,QAAQ,EAAE,IAAIC,GAAJ,EALH;AAMPC,IAAAA,YAAY,EAAElB,YAAY,CAACmB,WAAb,CAAyBV,OAAzB,CANP;AAOPW,IAAAA,SAAS,EAAE,IAAInB,gBAAJ,CAAqB,OAArB;AAPJ,GAAT;AASD;AAED;;;;;AAGAJ,QAAQ,CAACU,WAAD,EAAcX,YAAd,CAAR;AAEAyB,MAAM,CAACC,cAAP,CAAsBf,WAAW,CAACgB,SAAlC,EAA6C,cAA7C,EAA6D;AAC3DC,EAAAA,UAAU,EAAE,IAD+C;AAE3DC,EAAAA,GAAG,EAAE,YAAW;AACd,WAAO,KAAKd,CAAL,CAAOO,YAAd;AACD;AAJ0D,CAA7D;AAOAG,MAAM,CAACC,cAAP,CAAsBf,WAAW,CAACgB,SAAlC,EAA6C,gBAA7C,EAA+D;AAC7DC,EAAAA,UAAU,EAAE,IADiD;AAE7DC,EAAAA,GAAG,EAAE,YAAW;AACd,WAAOvB,cAAc,CAACwB,OAAtB;AACD;AAJ4D,CAA/D;AAOA;;;;;;;AAOA;;;;;;;;;;;;AAWAnB,WAAW,CAACgB,SAAZ,CAAsBlB,OAAtB,GAAgC,UAASsB,QAAT,EAAmB;AACjD,MAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AACD;;AAED,QAAMC,MAAM,GAAG,IAAf;AACA,SAAO1B,YAAY,CAAC,IAAD,EAAOwB,QAAP,EAAiBG,EAAE,IAAI;AACxC,UAAMC,GAAG,GAAGzB,YAAY,CAACuB,MAAM,CAAClB,CAAP,CAASF,OAAV,CAAxB;AACA,QAAIsB,GAAJ,EAAS,OAAOD,EAAE,CAACC,GAAD,CAAT;AAET1B,IAAAA,OAAO,CAACwB,MAAD,EAASA,MAAM,CAAClB,CAAP,CAASH,GAAlB,EAAuBqB,MAAM,CAAClB,CAAP,CAASF,OAAhC,EAAyCsB,GAAG,IAAI;AACrD,UAAIA,GAAJ,EAAS,OAAOD,EAAE,CAACC,GAAD,CAAT;AACTD,MAAAA,EAAE,CAAC,IAAD,EAAOD,MAAP,CAAF;AACD,KAHM,CAAP;AAID,GARkB,CAAnB;AASD,CAfD;;AAiBAtB,WAAW,CAACgB,SAAZ,CAAsBS,MAAtB,GAA+BjC,SAAS,CAAC,UAASU,OAAT,EAAkBkB,QAAlB,EAA4B;AACnE,MAAI,OAAOlB,OAAP,KAAmB,UAAvB,EAAoCkB,QAAQ,GAAGlB,OAAZ,EAAuBA,OAAO,GAAG,EAAjC;AACnC,MAAI,OAAOkB,QAAP,KAAoB,UAAxB,EAAoCA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;AACrC,CAHuC,EAGrC,4GAHqC,CAAxC;AAKA;;;;;;;;AAOApB,WAAW,CAACgB,SAAZ,CAAsBU,KAAtB,GAA8B,UAASC,KAAT,EAAgBP,QAAhB,EAA0B;AACtD,MAAI,OAAOO,KAAP,KAAiB,UAArB,EAAiC;AAC/BP,IAAAA,QAAQ,GAAGO,KAAX;AACAA,IAAAA,KAAK,GAAG,KAAR;AACD;;AAED,QAAML,MAAM,GAAG,IAAf;AACA,SAAO1B,YAAY,CAAC,IAAD,EAAOwB,QAAP,EAAiBG,EAAE,IAAI;AACxC,UAAMK,aAAa,GAAGJ,GAAG,IAAI;AAC3BF,MAAAA,MAAM,CAACO,IAAP,CAAY,OAAZ,EAAqBP,MAArB;;AAEA,UAAI,EAAEA,MAAM,CAACQ,QAAP,YAA2BjC,cAA7B,CAAJ,EAAkD;AAChD,aAAK,MAAMkC,IAAX,IAAmBT,MAAM,CAAClB,CAAP,CAASG,OAA5B,EAAqC;AACnCwB,UAAAA,IAAI,CAAC,CAAD,CAAJ,CAAQF,IAAR,CAAa,OAAb,EAAsBP,MAAtB;AACD;AACF;;AAEDA,MAAAA,MAAM,CAACU,kBAAP,CAA0B,OAA1B;AACAT,MAAAA,EAAE,CAACC,GAAD,CAAF;AACD,KAXD;;AAaA,QAAIF,MAAM,CAACQ,QAAP,IAAmB,IAAvB,EAA6B;AAC3BF,MAAAA,aAAa;AACb;AACD;;AAEDN,IAAAA,MAAM,CAACQ,QAAP,CAAgBJ,KAAhB,CAAsBC,KAAtB,EAA6BH,GAAG,IAAI;AAClC,YAAMS,aAAa,GAAGX,MAAM,CAACQ,QAAP,CAAgB1B,CAAhB,CAAkBF,OAAlB,CAA0B+B,aAAhD;;AACA,UAAI,CAACA,aAAL,EAAoB;AAClBL,QAAAA,aAAa,CAACJ,GAAD,CAAb;AACA;AACD;;AAEDS,MAAAA,aAAa,CAACC,QAAd,CAAuBP,KAAvB,EAA8BQ,IAAI,IAAIP,aAAa,CAACJ,GAAG,IAAIW,IAAR,CAAnD;AACD,KARD;AASD,GA5BkB,CAAnB;AA6BD,CApCD;AAsCA;;;;;;;;;;;;;;;AAaAnC,WAAW,CAACgB,SAAZ,CAAsBoB,EAAtB,GAA2B,UAASC,MAAT,EAAiBnC,OAAjB,EAA0B;AACnDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CADmD,CAGnD;;AACA,MAAI,CAACmC,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,KAAKjC,CAAL,CAAOF,OAAP,CAAemC,MAAxB;AACD,GANkD,CAQnD;;;AACA,QAAMC,YAAY,GAAGxB,MAAM,CAACyB,MAAP,CAAc,EAAd,EAAkB,KAAKnC,CAAL,CAAOF,OAAzB,EAAkCA,OAAlC,CAArB,CATmD,CAWnD;;AACA,MAAI,KAAKE,CAAL,CAAOG,OAAP,CAAeiC,GAAf,CAAmBH,MAAnB,KAA8BC,YAAY,CAACG,uBAAb,KAAyC,IAA3E,EAAiF;AAC/E,WAAO,KAAKrC,CAAL,CAAOG,OAAP,CAAeW,GAAf,CAAmBmB,MAAnB,CAAP;AACD,GAdkD,CAgBnD;;;AACAC,EAAAA,YAAY,CAACjC,cAAb,GAA8B,KAAKD,CAAL,CAAOC,cAArC,CAjBmD,CAmBnD;;AACA,MAAI,CAAC,KAAKyB,QAAV,EAAoB;AAClB,UAAM,IAAIvC,UAAJ,CAAe,uEAAf,CAAN;AACD,GAtBkD,CAwBnD;;;AACA,QAAM6C,EAAE,GAAG,IAAIhD,EAAJ,CAAOiD,MAAP,EAAe,KAAKP,QAApB,EAA8BQ,YAA9B,CAAX,CAzBmD,CA2BnD;;AACA,OAAKlC,CAAL,CAAOG,OAAP,CAAemC,GAAf,CAAmBL,MAAnB,EAA2BD,EAA3B,EA5BmD,CA6BnD;;AACA,SAAOA,EAAP;AACD,CA/BD;AAiCA;;;;;;;;;;;AASApC,WAAW,CAACgB,SAAZ,CAAsB2B,WAAtB,GAAoC,UAASzC,OAAT,EAAkB;AACpDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,MAAI,CAAC,KAAK4B,QAAV,EAAoB,OAAO,KAAP;AACpB,SAAO,KAAKA,QAAL,CAAca,WAAd,CAA0BzC,OAA1B,CAAP;AACD,CALD;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FAF,WAAW,CAACF,OAAZ,GAAsB,UAASG,GAAT,EAAcC,OAAd,EAAuBkB,QAAvB,EAAiC;AACrD,QAAMwB,IAAI,GAAGC,KAAK,CAAC7B,SAAN,CAAgB8B,KAAhB,CAAsB3C,IAAtB,CAA2B4C,SAA3B,EAAsC,CAAtC,CAAb;AACA3B,EAAAA,QAAQ,GAAG,OAAOwB,IAAI,CAACA,IAAI,CAACI,MAAL,GAAc,CAAf,CAAX,KAAiC,UAAjC,GAA8CJ,IAAI,CAACK,GAAL,EAA9C,GAA2DC,SAAtE;AACAhD,EAAAA,OAAO,GAAG0C,IAAI,CAACI,MAAL,GAAcJ,IAAI,CAACO,KAAL,EAAd,GAA6B,IAAvC;AACAjD,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAJqD,CAMrD;;AACA,QAAMkD,WAAW,GAAG,IAAIpD,WAAJ,CAAgBC,GAAhB,EAAqBC,OAArB,CAApB,CAPqD,CAQrD;;AACA,SAAOkD,WAAW,CAACtD,OAAZ,CAAoBsB,QAApB,CAAP;AACD,CAVD;AAYA;;;;;;;;AAMApB,WAAW,CAACgB,SAAZ,CAAsBqC,YAAtB,GAAqC,UAASnD,OAAT,EAAkB;AACrDA,EAAAA,OAAO,GAAGY,MAAM,CAACyB,MAAP,CAAc;AAAEe,IAAAA,QAAQ,EAAE;AAAZ,GAAd,EAAkCpD,OAAlC,CAAV;;AACA,MAAI,CAAC,KAAK4B,QAAV,EAAoB;AAClB,UAAM,IAAIvC,UAAJ,CAAe,qDAAf,CAAN;AACD;;AAED,MAAI,CAAC,KAAKuC,QAAL,CAAcyB,iBAAd,EAAL,EAAwC;AACtC,UAAM,IAAIhE,UAAJ,CAAe,4CAAf,CAAN;AACD;;AAED,SAAO,KAAKuC,QAAL,CAAcuB,YAAd,CAA2BnD,OAA3B,EAAoC,KAAKE,CAAL,CAAOF,OAA3C,CAAP;AACD,CAXD;AAaA;;;;;;;;;;;;AAUAF,WAAW,CAACgB,SAAZ,CAAsBwC,WAAtB,GAAoC,UAAStD,OAAT,EAAkBuD,SAAlB,EAA6B;AAC/D,MAAI,OAAOvD,OAAP,KAAmB,UAAvB,EAAoCuD,SAAS,GAAGvD,OAAb,EAAwBA,OAAO,GAAGgD,SAAlC;AACnC,QAAMQ,OAAO,GAAG,KAAKL,YAAL,CAAkBnD,OAAlB,CAAhB;;AAEA,MAAIyD,cAAc,GAAG,CAACnC,GAAD,EAAMoC,MAAN,EAAcC,IAAd,KAAuB;AAC1C;AACAF,IAAAA,cAAc,GAAG,MAAM;AACrB,YAAM,IAAIG,cAAJ,CAAmB,0CAAnB,CAAN;AACD,KAFD;;AAIAD,IAAAA,IAAI,GAAG/C,MAAM,CAACyB,MAAP,CAAc;AAAEwB,MAAAA,KAAK,EAAE;AAAT,KAAd,EAA+BF,IAA/B,CAAP;AACAH,IAAAA,OAAO,CAACM,UAAR;;AAEA,QAAIxC,GAAJ,EAAS;AACP,UAAIqC,IAAI,CAACE,KAAT,EAAgB,MAAMvC,GAAN;AAChB,aAAOlB,OAAO,CAAC2D,MAAR,CAAezC,GAAf,CAAP;AACD;AACF,GAbD;;AAeA,MAAI;AACF,UAAMoC,MAAM,GAAGH,SAAS,CAACC,OAAD,CAAxB;AACA,WAAOpD,OAAO,CAAC4D,OAAR,CAAgBN,MAAhB,EACJO,IADI,CACCP,MAAM,IAAID,cAAc,CAAC,IAAD,EAAOC,MAAP,CADzB,EAEJQ,KAFI,CAEE5C,GAAG,IAAImC,cAAc,CAACnC,GAAD,EAAM,IAAN,EAAY;AAAEuC,MAAAA,KAAK,EAAE;AAAT,KAAZ,CAFvB,CAAP;AAGD,GALD,CAKE,OAAOvC,GAAP,EAAY;AACZ,WAAOmC,cAAc,CAACnC,GAAD,EAAM,IAAN,EAAY;AAAEuC,MAAAA,KAAK,EAAE;AAAT,KAAZ,CAArB;AACD;AACF,CA3BD;AA4BA;;;;;;;;;;;;;;;;;;;AAiBA/D,WAAW,CAACgB,SAAZ,CAAsBqD,KAAtB,GAA8B,UAASC,QAAT,EAAmBpE,OAAnB,EAA4B;AACxDoE,EAAAA,QAAQ,GAAGA,QAAQ,IAAI,EAAvB;AACApE,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB,CAFwD,CAIxD;;AACA,MAAI,CAAC2C,KAAK,CAAC0B,OAAN,CAAcD,QAAd,CAAL,EAA8B;AAC5BpE,IAAAA,OAAO,GAAGoE,QAAV;AACAA,IAAAA,QAAQ,GAAG,EAAX;AACD;;AAED,SAAO,IAAIpF,YAAJ,CAAiB,IAAjB,EAAuBoF,QAAvB,EAAiCpE,OAAjC,CAAP;AACD,CAXD;AAaA;;;;;;;;AAMAF,WAAW,CAACgB,SAAZ,CAAsBwD,SAAtB,GAAkC,YAAW;AAC3C,SAAO,KAAKpE,CAAL,CAAOF,OAAP,CAAeuE,MAAtB;AACD,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiB3E,WAAjB","sourcesContent":["'use strict';\n\nconst ChangeStream = require('./change_stream');\nconst Db = require('./db');\nconst EventEmitter = require('events').EventEmitter;\nconst inherits = require('util').inherits;\nconst MongoError = require('./core').MongoError;\nconst deprecate = require('util').deprecate;\nconst WriteConcern = require('./write_concern');\nconst MongoDBNamespace = require('./utils').MongoDBNamespace;\nconst ReadPreference = require('./core/topologies/read_preference');\nconst maybePromise = require('./utils').maybePromise;\nconst NativeTopology = require('./topologies/native_topology');\nconst connect = require('./operations/connect').connect;\nconst validOptions = require('./operations/connect').validOptions;\n\n/**\n * @fileOverview The **MongoClient** class is a class that allows for making Connections to MongoDB.\n *\n * @example\n * // Connect using a MongoClient instance\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * const mongoClient = new MongoClient(url);\n * mongoClient.connect(function(err, client) {\n *   const db = client.db(dbName);\n *   client.close();\n * });\n *\n * @example\n * // Connect using the MongoClient.connect static method\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   const db = client.db(dbName);\n *   client.close();\n * });\n */\n\n/**\n * A string specifying the level of a ReadConcern\n * @typedef {'local'|'available'|'majority'|'linearizable'|'snapshot'} ReadConcernLevel\n * @see https://docs.mongodb.com/manual/reference/read-concern/index.html#read-concern-levels\n */\n\n/**\n * Configuration options for drivers wrapping the node driver.\n *\n * @typedef {Object} DriverInfoOptions\n * @property {string} [name] The name of the driver\n * @property {string} [version] The version of the driver\n * @property {string} [platform] Optional platform information\n */\n\n/**\n * Configuration options for drivers wrapping the node driver.\n *\n * @typedef {Object} DriverInfoOptions\n * @property {string} [name] The name of the driver\n * @property {string} [version] The version of the driver\n * @property {string} [platform] Optional platform information\n */\n\n/**\n * Creates a new MongoClient instance\n * @class\n * @param {string} url The connection URI string\n * @param {object} [options] Optional settings\n * @param {number} [options.poolSize=5] The maximum size of the individual server pool\n * @param {boolean} [options.ssl=false] Enable SSL connection. *deprecated* use `tls` variants\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against Certificate Authority\n * @param {buffer} [options.sslCA=undefined] SSL Certificate store binary buffer *deprecated* use `tls` variants\n * @param {buffer} [options.sslCert=undefined] SSL Certificate binary buffer *deprecated* use `tls` variants\n * @param {buffer} [options.sslKey=undefined] SSL Key file binary buffer *deprecated* use `tls` variants\n * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase *deprecated* use `tls` variants\n * @param {buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer *deprecated* use `tls` variants\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function. *deprecated* use `tls` variants\n * @param {boolean} [options.tls=false] Enable TLS connections\n * @param {boolean} [options.tlsInsecure=false] Relax TLS constraints, disabling validation\n * @param {string} [options.tlsCAFile] A path to file with either a single or bundle of certificate authorities to be considered trusted when making a TLS connection\n * @param {string} [options.tlsCertificateKeyFile] A path to the client certificate file or the client private key file; in the case that they both are needed, the files should be concatenated\n * @param {string} [options.tlsCertificateKeyFilePassword] The password to decrypt the client private key to be used for TLS connections\n * @param {boolean} [options.tlsAllowInvalidCertificates] Specifies whether or not the driver should error when the server’s TLS certificate is invalid\n * @param {boolean} [options.tlsAllowInvalidHostnames] Specifies whether or not the driver should error when there is a mismatch between the server’s hostname and the hostname specified by the TLS certificate\n * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out\n * @param {number} [options.socketTimeoutMS=360000] How long a send or receive on a socket can take before timing out\n * @param {number} [options.family] Version of IP stack. Can be 4, 6 or null (default).\n * If null, will attempt to connect with IPv6, and will fall back to IPv4 on failure\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {string} [options.replicaSet=undefined] The Replicaset set name\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {string} [options.authSource=undefined] Define the database to authenticate against\n * @param {(number|string)} [options.w] The write concern\n * @param {number} [options.wtimeout] The write concern timeout\n * @param {boolean} [options.j=false] Specify a journal write concern\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern] Specify a read concern for the collection (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed)\n * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)\n * @param {object} [options.logger=undefined] Custom logger object\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers\n * @param {boolean} [options.promoteLongs=true] Promotes long values to number if they fit inside the 53 bits resolution\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit\n * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness\n * @param {string} [options.appname=undefined] The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections\n * @param {string} [options.auth.user=undefined] The username for auth\n * @param {string} [options.auth.password=undefined] The password for auth\n * @param {string} [options.authMechanism=undefined] Mechanism for authentication: MDEFAULT, GSSAPI, PLAIN, MONGODB-X509, or SCRAM-SHA-1\n * @param {object} [options.compression] Type of compression to use: snappy or zlib\n * @param {boolean} [options.fsync=false] Specify a file sync write concern\n * @param {array} [options.readPreferenceTags] Read preference tags\n * @param {number} [options.numberOfRetries=5] The number of retries for a tailable cursor\n * @param {boolean} [options.auto_reconnect=true] Enable auto reconnecting for single server instances\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this client\n * @param {number} [options.minSize] If present, the connection pool will be initialized with minSize connections, and will never dip below minSize connections\n * @param {boolean} [options.useNewUrlParser=true] Determines whether or not to use the new url parser. Enables the new, spec-compliant, url parser shipped in the core driver. This url parser fixes a number of problems with the original parser, and aims to outright replace that parser in the near future. Defaults to true, and must be explicitly set to false to use the legacy url parser.\n * @param {boolean} [options.useUnifiedTopology] Enables the new unified topology layer\n * @param {Number} [options.localThresholdMS=15] **Only applies to the unified topology** The size of the latency window for selecting among multiple suitable servers\n * @param {Number} [options.serverSelectionTimeoutMS=30000] **Only applies to the unified topology** How long to block for server selection before throwing an error\n * @param {Number} [options.heartbeatFrequencyMS=10000] **Only applies to the unified topology** The frequency with which topology updates are scheduled\n * @param {number} [options.maxPoolSize=10] **Only applies to the unified topology** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections.\n * @param {number} [options.minPoolSize=0] **Only applies to the unified topology** The minimum number of connections that MUST exist at any moment in a single connection pool.\n * @param {number} [options.maxIdleTimeMS] **Only applies to the unified topology** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. The default is infinity.\n * @param {number} [options.waitQueueTimeoutMS=0] **Only applies to the unified topology** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit.\n * @param {AutoEncrypter~AutoEncryptionOptions} [options.autoEncryption] Optionally enable client side auto encryption\n * @param {DriverInfoOptions} [options.driverInfo] Allows a wrapping driver to amend the client metadata generated by the driver to include information about the wrapping driver\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {MongoClient} a MongoClient instance\n */\nfunction MongoClient(url, options) {\n  if (!(this instanceof MongoClient)) return new MongoClient(url, options);\n  // Set up event emitter\n  EventEmitter.call(this);\n\n  // The internal state\n  this.s = {\n    url: url,\n    options: options || {},\n    promiseLibrary: (options && options.promiseLibrary) || Promise,\n    dbCache: new Map(),\n    sessions: new Set(),\n    writeConcern: WriteConcern.fromOptions(options),\n    namespace: new MongoDBNamespace('admin')\n  };\n}\n\n/**\n * @ignore\n */\ninherits(MongoClient, EventEmitter);\n\nObject.defineProperty(MongoClient.prototype, 'writeConcern', {\n  enumerable: true,\n  get: function() {\n    return this.s.writeConcern;\n  }\n});\n\nObject.defineProperty(MongoClient.prototype, 'readPreference', {\n  enumerable: true,\n  get: function() {\n    return ReadPreference.primary;\n  }\n});\n\n/**\n * The callback format for results\n * @callback MongoClient~connectCallback\n * @param {MongoError} error An error instance representing the error during the execution.\n * @param {MongoClient} client The connected client.\n */\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {Promise<MongoClient>} returns Promise if no callback passed\n */\nMongoClient.prototype.connect = function(callback) {\n  if (typeof callback === 'string') {\n    throw new TypeError('`connect` only accepts a callback');\n  }\n\n  const client = this;\n  return maybePromise(this, callback, cb => {\n    const err = validOptions(client.s.options);\n    if (err) return cb(err);\n\n    connect(client, client.s.url, client.s.options, err => {\n      if (err) return cb(err);\n      cb(null, client);\n    });\n  });\n};\n\nMongoClient.prototype.logout = deprecate(function(options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  if (typeof callback === 'function') callback(null, true);\n}, 'Multiple authentication is prohibited on a connected client, please only authenticate once per MongoClient');\n\n/**\n * Close the db and its underlying connections\n * @method\n * @param {boolean} [force=false] Force close, emitting no events\n * @param {Db~noResultCallback} [callback] The result callback\n * @return {Promise} returns Promise if no callback passed\n */\nMongoClient.prototype.close = function(force, callback) {\n  if (typeof force === 'function') {\n    callback = force;\n    force = false;\n  }\n\n  const client = this;\n  return maybePromise(this, callback, cb => {\n    const completeClose = err => {\n      client.emit('close', client);\n\n      if (!(client.topology instanceof NativeTopology)) {\n        for (const item of client.s.dbCache) {\n          item[1].emit('close', client);\n        }\n      }\n\n      client.removeAllListeners('close');\n      cb(err);\n    };\n\n    if (client.topology == null) {\n      completeClose();\n      return;\n    }\n\n    client.topology.close(force, err => {\n      const autoEncrypter = client.topology.s.options.autoEncrypter;\n      if (!autoEncrypter) {\n        completeClose(err);\n        return;\n      }\n\n      autoEncrypter.teardown(force, err2 => completeClose(err || err2));\n    });\n  });\n};\n\n/**\n * Create a new Db instance sharing the current socket connections. Be aware that the new db instances are\n * related in a parent-child relationship to the original instance so that events are correctly emitted on child\n * db instances. Child db instances are cached so performing db('db1') twice will return the same instance.\n * You can control these behaviors with the options noListener and returnNonCachedInstance.\n *\n * @method\n * @param {string} [dbName] The name of the database we want to use. If not provided, use database name from connection string.\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.\n * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created\n * @return {Db}\n */\nMongoClient.prototype.db = function(dbName, options) {\n  options = options || {};\n\n  // Default to db from connection string if not provided\n  if (!dbName) {\n    dbName = this.s.options.dbName;\n  }\n\n  // Copy the options and add out internal override of the not shared flag\n  const finalOptions = Object.assign({}, this.s.options, options);\n\n  // Do we have the db in the cache already\n  if (this.s.dbCache.has(dbName) && finalOptions.returnNonCachedInstance !== true) {\n    return this.s.dbCache.get(dbName);\n  }\n\n  // Add promiseLibrary\n  finalOptions.promiseLibrary = this.s.promiseLibrary;\n\n  // If no topology throw an error message\n  if (!this.topology) {\n    throw new MongoError('MongoClient must be connected before calling MongoClient.prototype.db');\n  }\n\n  // Return the db object\n  const db = new Db(dbName, this.topology, finalOptions);\n\n  // Add the db to the cache\n  this.s.dbCache.set(dbName, db);\n  // Return the database\n  return db;\n};\n\n/**\n * Check if MongoClient is connected\n *\n * @method\n * @param {object} [options] Optional settings.\n * @param {boolean} [options.noListener=false] Do not make the db an event listener to the original connection.\n * @param {boolean} [options.returnNonCachedInstance=false] Control if you want to return a cached instance or have a new one created\n * @return {boolean}\n */\nMongoClient.prototype.isConnected = function(options) {\n  options = options || {};\n\n  if (!this.topology) return false;\n  return this.topology.isConnected(options);\n};\n\n/**\n * Connect to MongoDB using a url as documented at\n *\n *  docs.mongodb.org/manual/reference/connection-string/\n *\n * Note that for replicasets the replicaSet query parameter is required in the 2.0 driver\n *\n * @method\n * @static\n * @param {string} url The connection URI string\n * @param {object} [options] Optional settings\n * @param {number} [options.poolSize=5] The maximum size of the individual server pool\n * @param {boolean} [options.ssl=false] Enable SSL connection. *deprecated* use `tls` variants\n * @param {boolean} [options.sslValidate=false] Validate mongod server certificate against Certificate Authority\n * @param {buffer} [options.sslCA=undefined] SSL Certificate store binary buffer *deprecated* use `tls` variants\n * @param {buffer} [options.sslCert=undefined] SSL Certificate binary buffer *deprecated* use `tls` variants\n * @param {buffer} [options.sslKey=undefined] SSL Key file binary buffer *deprecated* use `tls` variants\n * @param {string} [options.sslPass=undefined] SSL Certificate pass phrase *deprecated* use `tls` variants\n * @param {buffer} [options.sslCRL=undefined] SSL Certificate revocation list binary buffer *deprecated* use `tls` variants\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function. *deprecated* use `tls` variants\n * @param {boolean} [options.tls=false] Enable TLS connections\n * @param {boolean} [options.tlsInsecure=false] Relax TLS constraints, disabling validation\n * @param {string} [options.tlsCAFile] A path to file with either a single or bundle of certificate authorities to be considered trusted when making a TLS connection\n * @param {string} [options.tlsCertificateKeyFile] A path to the client certificate file or the client private key file; in the case that they both are needed, the files should be concatenated\n * @param {string} [options.tlsCertificateKeyFilePassword] The password to decrypt the client private key to be used for TLS connections\n * @param {boolean} [options.tlsAllowInvalidCertificates] Specifies whether or not the driver should error when the server’s TLS certificate is invalid\n * @param {boolean} [options.tlsAllowInvalidHostnames] Specifies whether or not the driver should error when there is a mismatch between the server’s hostname and the hostname specified by the TLS certificate\n * @param {boolean} [options.autoReconnect=true] Enable autoReconnect for single server instances\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=30000] The number of milliseconds to wait before initiating keepAlive on the TCP socket\n * @param {number} [options.connectTimeoutMS=10000] How long to wait for a connection to be established before timing out\n * @param {number} [options.socketTimeoutMS=360000] How long a send or receive on a socket can take before timing out\n * @param {number} [options.family] Version of IP stack. Can be 4, 6 or null (default).\n * If null, will attempt to connect with IPv6, and will fall back to IPv4 on failure\n * @param {number} [options.reconnectTries=30] Server attempt to reconnect #times\n * @param {number} [options.reconnectInterval=1000] Server will wait # milliseconds between retries\n * @param {boolean} [options.ha=true] Control if high availability monitoring runs for Replicaset or Mongos proxies\n * @param {number} [options.haInterval=10000] The High availability period for replicaset inquiry\n * @param {string} [options.replicaSet=undefined] The Replicaset set name\n * @param {number} [options.secondaryAcceptableLatencyMS=15] Cutoff latency point in MS for Replicaset member selection\n * @param {number} [options.acceptableLatencyMS=15] Cutoff latency point in MS for Mongos proxies selection\n * @param {boolean} [options.connectWithNoPrimary=false] Sets if the driver should connect even if no primary is available\n * @param {string} [options.authSource=undefined] Define the database to authenticate against\n * @param {(number|string)} [options.w] The write concern\n * @param {number} [options.wtimeout] The write concern timeout\n * @param {boolean} [options.j=false] Specify a journal write concern\n * @param {boolean} [options.forceServerObjectId=false] Force server to assign _id values instead of driver\n * @param {boolean} [options.serializeFunctions=false] Serialize functions on any object\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields\n * @param {boolean} [options.raw=false] Return document results as raw BSON buffers\n * @param {number} [options.bufferMaxEntries=-1] Sets a cap on how many operations the driver will buffer up before giving up on getting a working connection, default is -1 which is unlimited\n * @param {(ReadPreference|string)} [options.readPreference] The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST)\n * @param {object} [options.pkFactory] A primary key factory object for generation of custom _id keys\n * @param {object} [options.promiseLibrary] A Promise library class the application wishes to use such as Bluebird, must be ES6 compatible\n * @param {object} [options.readConcern] Specify a read concern for the collection (only MongoDB 3.2 or higher supported)\n * @param {ReadConcernLevel} [options.readConcern.level='local'] Specify a read concern level for the collection operations (only MongoDB 3.2 or higher supported)\n * @param {number} [options.maxStalenessSeconds=undefined] The max staleness to secondary reads (values under 10 seconds cannot be guaranteed)\n * @param {string} [options.loggerLevel=undefined] The logging level (error/warn/info/debug)\n * @param {object} [options.logger=undefined] Custom logger object\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers\n * @param {boolean} [options.promoteLongs=true] Promotes long values to number if they fit inside the 53 bits resolution\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit\n * @param {object} [options.validateOptions=false] Validate MongoClient passed in options for correctness\n * @param {string} [options.appname=undefined] The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections\n * @param {string} [options.auth.user=undefined] The username for auth\n * @param {string} [options.auth.password=undefined] The password for auth\n * @param {string} [options.authMechanism=undefined] Mechanism for authentication: MDEFAULT, GSSAPI, PLAIN, MONGODB-X509, or SCRAM-SHA-1\n * @param {object} [options.compression] Type of compression to use: snappy or zlib\n * @param {boolean} [options.fsync=false] Specify a file sync write concern\n * @param {array} [options.readPreferenceTags] Read preference tags\n * @param {number} [options.numberOfRetries=5] The number of retries for a tailable cursor\n * @param {boolean} [options.auto_reconnect=true] Enable auto reconnecting for single server instances\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this client\n * @param {number} [options.minSize] If present, the connection pool will be initialized with minSize connections, and will never dip below minSize connections\n * @param {boolean} [options.useNewUrlParser=true] Determines whether or not to use the new url parser. Enables the new, spec-compliant, url parser shipped in the core driver. This url parser fixes a number of problems with the original parser, and aims to outright replace that parser in the near future. Defaults to true, and must be explicitly set to false to use the legacy url parser.\n * @param {boolean} [options.useUnifiedTopology] Enables the new unified topology layer\n * @param {Number} [options.localThresholdMS=15] **Only applies to the unified topology** The size of the latency window for selecting among multiple suitable servers\n * @param {Number} [options.serverSelectionTimeoutMS=30000] **Only applies to the unified topology** How long to block for server selection before throwing an error\n * @param {Number} [options.heartbeatFrequencyMS=10000] **Only applies to the unified topology** The frequency with which topology updates are scheduled\n * @param {number} [options.maxPoolSize=10] **Only applies to the unified topology** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections.\n * @param {number} [options.minPoolSize=0] **Only applies to the unified topology** The minimum number of connections that MUST exist at any moment in a single connection pool.\n * @param {number} [options.maxIdleTimeMS] **Only applies to the unified topology** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. The default is infinity.\n * @param {number} [options.waitQueueTimeoutMS=0] **Only applies to the unified topology** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit.\n * @param {AutoEncrypter~AutoEncryptionOptions} [options.autoEncryption] Optionally enable client side auto encryption\n * @param {DriverInfoOptions} [options.driverInfo] Allows a wrapping driver to amend the client metadata generated by the driver to include information about the wrapping driver\n * @param {MongoClient~connectCallback} [callback] The command result callback\n * @return {Promise<MongoClient>} returns Promise if no callback passed\n */\nMongoClient.connect = function(url, options, callback) {\n  const args = Array.prototype.slice.call(arguments, 1);\n  callback = typeof args[args.length - 1] === 'function' ? args.pop() : undefined;\n  options = args.length ? args.shift() : null;\n  options = options || {};\n\n  // Create client\n  const mongoClient = new MongoClient(url, options);\n  // Execute the connect method\n  return mongoClient.connect(callback);\n};\n\n/**\n * Starts a new session on the server\n *\n * @param {SessionOptions} [options] optional settings for a driver session\n * @return {ClientSession} the newly established session\n */\nMongoClient.prototype.startSession = function(options) {\n  options = Object.assign({ explicit: true }, options);\n  if (!this.topology) {\n    throw new MongoError('Must connect to a server before calling this method');\n  }\n\n  if (!this.topology.hasSessionSupport()) {\n    throw new MongoError('Current topology does not support sessions');\n  }\n\n  return this.topology.startSession(options, this.s.options);\n};\n\n/**\n * Runs a given operation with an implicitly created session. The lifetime of the session\n * will be handled without the need for user interaction.\n *\n * NOTE: presently the operation MUST return a Promise (either explicit or implicity as an async function)\n *\n * @param {Object} [options] Optional settings to be appled to implicitly created session\n * @param {Function} operation An operation to execute with an implicitly created session. The signature of this MUST be `(session) => {}`\n * @return {Promise}\n */\nMongoClient.prototype.withSession = function(options, operation) {\n  if (typeof options === 'function') (operation = options), (options = undefined);\n  const session = this.startSession(options);\n\n  let cleanupHandler = (err, result, opts) => {\n    // prevent multiple calls to cleanupHandler\n    cleanupHandler = () => {\n      throw new ReferenceError('cleanupHandler was called too many times');\n    };\n\n    opts = Object.assign({ throw: true }, opts);\n    session.endSession();\n\n    if (err) {\n      if (opts.throw) throw err;\n      return Promise.reject(err);\n    }\n  };\n\n  try {\n    const result = operation(session);\n    return Promise.resolve(result)\n      .then(result => cleanupHandler(null, result))\n      .catch(err => cleanupHandler(err, null, { throw: true }));\n  } catch (err) {\n    return cleanupHandler(err, null, { throw: false });\n  }\n};\n/**\n * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this cluster. Will ignore all changes to system collections, as well as the local, admin,\n * and config databases.\n * @method\n * @since 3.1.0\n * @param {Array} [pipeline] An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n * @param {object} [options] Optional settings\n * @param {string} [options.fullDocument='default'] Allowed values: ‘default’, ‘updateLookup’. When set to ‘updateLookup’, the change stream will include both a delta describing the changes to the document, as well as a copy of the entire document that was changed from some time after the change occurred.\n * @param {object} [options.resumeAfter] Specifies the logical starting point for the new change stream. This should be the _id field from a previously returned change stream document.\n * @param {number} [options.maxAwaitTimeMS] The maximum amount of time for the server to wait on new documents to satisfy a change stream query\n * @param {number} [options.batchSize=1000] The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {object} [options.collation] Specify collation settings for operation. See {@link https://docs.mongodb.com/manual/reference/command/aggregate|aggregation documentation}.\n * @param {ReadPreference} [options.readPreference] The read preference. See {@link https://docs.mongodb.com/manual/reference/read-preference|read preference documentation}.\n * @param {Timestamp} [options.startAtOperationTime] receive change events that occur after the specified timestamp\n * @param {ClientSession} [options.session] optional session to use for this operation\n * @return {ChangeStream} a ChangeStream instance.\n */\nMongoClient.prototype.watch = function(pipeline, options) {\n  pipeline = pipeline || [];\n  options = options || {};\n\n  // Allow optionally not specifying a pipeline\n  if (!Array.isArray(pipeline)) {\n    options = pipeline;\n    pipeline = [];\n  }\n\n  return new ChangeStream(this, pipeline, options);\n};\n\n/**\n * Return the mongo client logger\n * @method\n * @return {Logger} return the mongo client logger\n * @ignore\n */\nMongoClient.prototype.getLogger = function() {\n  return this.s.options.logger;\n};\n\nmodule.exports = MongoClient;\n"]},"metadata":{},"sourceType":"script"}