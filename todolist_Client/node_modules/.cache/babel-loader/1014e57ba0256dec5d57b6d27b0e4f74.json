{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst resolveReadPreference = require('../utils').resolveReadPreference;\n\nconst ReadConcern = require('../read_concern');\n\nconst WriteConcern = require('../write_concern');\n\nconst maxWireVersion = require('../core/utils').maxWireVersion;\n\nconst commandSupportsReadConcern = require('../core/sessions').commandSupportsReadConcern;\n\nconst MongoError = require('../error').MongoError;\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n\nclass CommandOperationV2 extends OperationBase {\n  constructor(parent, options, operationOptions) {\n    super(options);\n    this.ns = parent.s.namespace.withCollection('$cmd');\n    this.readPreference = resolveReadPreference(parent, this.options);\n    this.readConcern = resolveReadConcern(parent, this.options);\n    this.writeConcern = resolveWriteConcern(parent, this.options);\n    this.explain = false;\n\n    if (operationOptions && typeof operationOptions.fullResponse === 'boolean') {\n      this.fullResponse = true;\n    } // TODO: A lot of our code depends on having the read preference in the options. This should\n    //       go away, but also requires massive test rewrites.\n\n\n    this.options.readPreference = this.readPreference; // TODO(NODE-2056): make logger another \"inheritable\" property\n\n    if (parent.s.logger) {\n      this.logger = parent.s.logger;\n    } else if (parent.s.db && parent.s.db.logger) {\n      this.logger = parent.s.db.logger;\n    }\n  }\n\n  executeCommand(server, cmd, callback) {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n    const options = this.options;\n    const serverWireVersion = maxWireVersion(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {\n      Object.assign(cmd, {\n        readConcern: this.readConcern\n      });\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(new MongoError(`Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`));\n      return;\n    }\n\n    if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      if (this.writeConcern && this.hasAspect(Aspect.WRITE_OPERATION)) {\n        Object.assign(cmd, {\n          writeConcern: this.writeConcern\n        });\n      }\n\n      if (options.collation && typeof options.collation === 'object') {\n        Object.assign(cmd, {\n          collation: options.collation\n        });\n      }\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (typeof options.comment === 'string') {\n      cmd.comment = options.comment;\n    }\n\n    if (this.logger && this.logger.isDebug()) {\n      this.logger.debug(`executing command ${JSON.stringify(cmd)} against ${this.ns}`);\n    }\n\n    server.command(this.ns.toString(), cmd, this.options, (err, result) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      if (this.fullResponse) {\n        callback(null, result);\n        return;\n      }\n\n      callback(null, result.result);\n    });\n  }\n\n}\n\nfunction resolveWriteConcern(parent, options) {\n  return WriteConcern.fromOptions(options) || parent.writeConcern;\n}\n\nfunction resolveReadConcern(parent, options) {\n  return ReadConcern.fromOptions(options) || parent.readConcern;\n}\n\nmodule.exports = CommandOperationV2;","map":{"version":3,"sources":["/home/hoangnd/source/ReactJS/todolist/node_modules/mongodb/lib/operations/command_v2.js"],"names":["Aspect","require","OperationBase","resolveReadPreference","ReadConcern","WriteConcern","maxWireVersion","commandSupportsReadConcern","MongoError","SUPPORTS_WRITE_CONCERN_AND_COLLATION","CommandOperationV2","constructor","parent","options","operationOptions","ns","s","namespace","withCollection","readPreference","readConcern","resolveReadConcern","writeConcern","resolveWriteConcern","explain","fullResponse","logger","db","executeCommand","server","cmd","callback","serverWireVersion","inTransaction","session","Object","assign","collation","name","hasAspect","WRITE_OPERATION","maxTimeMS","comment","isDebug","debug","JSON","stringify","command","toString","err","result","fromOptions","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst OperationBase = require('./operation').OperationBase;\nconst resolveReadPreference = require('../utils').resolveReadPreference;\nconst ReadConcern = require('../read_concern');\nconst WriteConcern = require('../write_concern');\nconst maxWireVersion = require('../core/utils').maxWireVersion;\nconst commandSupportsReadConcern = require('../core/sessions').commandSupportsReadConcern;\nconst MongoError = require('../error').MongoError;\n\nconst SUPPORTS_WRITE_CONCERN_AND_COLLATION = 5;\n\nclass CommandOperationV2 extends OperationBase {\n  constructor(parent, options, operationOptions) {\n    super(options);\n\n    this.ns = parent.s.namespace.withCollection('$cmd');\n    this.readPreference = resolveReadPreference(parent, this.options);\n    this.readConcern = resolveReadConcern(parent, this.options);\n    this.writeConcern = resolveWriteConcern(parent, this.options);\n    this.explain = false;\n\n    if (operationOptions && typeof operationOptions.fullResponse === 'boolean') {\n      this.fullResponse = true;\n    }\n\n    // TODO: A lot of our code depends on having the read preference in the options. This should\n    //       go away, but also requires massive test rewrites.\n    this.options.readPreference = this.readPreference;\n\n    // TODO(NODE-2056): make logger another \"inheritable\" property\n    if (parent.s.logger) {\n      this.logger = parent.s.logger;\n    } else if (parent.s.db && parent.s.db.logger) {\n      this.logger = parent.s.db.logger;\n    }\n  }\n\n  executeCommand(server, cmd, callback) {\n    // TODO: consider making this a non-enumerable property\n    this.server = server;\n\n    const options = this.options;\n    const serverWireVersion = maxWireVersion(server);\n    const inTransaction = this.session && this.session.inTransaction();\n\n    if (this.readConcern && commandSupportsReadConcern(cmd) && !inTransaction) {\n      Object.assign(cmd, { readConcern: this.readConcern });\n    }\n\n    if (options.collation && serverWireVersion < SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      callback(\n        new MongoError(\n          `Server ${server.name}, which reports wire version ${serverWireVersion}, does not support collation`\n        )\n      );\n      return;\n    }\n\n    if (serverWireVersion >= SUPPORTS_WRITE_CONCERN_AND_COLLATION) {\n      if (this.writeConcern && this.hasAspect(Aspect.WRITE_OPERATION)) {\n        Object.assign(cmd, { writeConcern: this.writeConcern });\n      }\n\n      if (options.collation && typeof options.collation === 'object') {\n        Object.assign(cmd, { collation: options.collation });\n      }\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    if (typeof options.comment === 'string') {\n      cmd.comment = options.comment;\n    }\n\n    if (this.logger && this.logger.isDebug()) {\n      this.logger.debug(`executing command ${JSON.stringify(cmd)} against ${this.ns}`);\n    }\n\n    server.command(this.ns.toString(), cmd, this.options, (err, result) => {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      if (this.fullResponse) {\n        callback(null, result);\n        return;\n      }\n\n      callback(null, result.result);\n    });\n  }\n}\n\nfunction resolveWriteConcern(parent, options) {\n  return WriteConcern.fromOptions(options) || parent.writeConcern;\n}\n\nfunction resolveReadConcern(parent, options) {\n  return ReadConcern.fromOptions(options) || parent.readConcern;\n}\n\nmodule.exports = CommandOperationV2;\n"]},"metadata":{},"sourceType":"script"}