{"ast":null,"code":"'use strict';\n\nconst Aspect = require('./operation').Aspect;\n\nconst defineAspects = require('./operation').defineAspects;\n\nconst OperationBase = require('./operation').OperationBase;\n\nconst executeCommand = require('./db_ops').executeCommand;\n\nconst MongoError = require('../core').MongoError;\n\nconst ReadPreference = require('../core').ReadPreference;\n\nclass CreateIndexesOperation extends OperationBase {\n  constructor(collection, indexSpecs, options) {\n    super(options);\n    this.collection = collection;\n    this.indexSpecs = indexSpecs;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const indexSpecs = this.indexSpecs;\n    let options = this.options;\n    const capabilities = coll.s.topology.capabilities(); // Ensure we generate the correct name if the parameter is not set\n\n    for (let i = 0; i < indexSpecs.length; i++) {\n      if (indexSpecs[i].name == null) {\n        const keys = []; // Did the user pass in a collation, check if our write server supports it\n\n        if (indexSpecs[i].collation && capabilities && !capabilities.commandsTakeCollation) {\n          return callback(new MongoError('server/primary/mongos does not support collation'));\n        }\n\n        for (let name in indexSpecs[i].key) {\n          keys.push(`${name}_${indexSpecs[i].key[name]}`);\n        } // Set the name\n\n\n        indexSpecs[i].name = keys.join('_');\n      }\n    }\n\n    options = Object.assign({}, options, {\n      readPreference: ReadPreference.PRIMARY\n    }); // Execute the index\n\n    executeCommand(coll.s.db, {\n      createIndexes: coll.collectionName,\n      indexes: indexSpecs\n    }, options, callback);\n  }\n\n}\n\ndefineAspects(CreateIndexesOperation, Aspect.WRITE_OPERATION);\nmodule.exports = CreateIndexesOperation;","map":{"version":3,"sources":["/home/hoangnd/source/ReactJS/todolist/node_modules/mongodb/lib/operations/create_indexes.js"],"names":["Aspect","require","defineAspects","OperationBase","executeCommand","MongoError","ReadPreference","CreateIndexesOperation","constructor","collection","indexSpecs","options","execute","callback","coll","capabilities","s","topology","i","length","name","keys","collation","commandsTakeCollation","key","push","join","Object","assign","readPreference","PRIMARY","db","createIndexes","collectionName","indexes","WRITE_OPERATION","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAAtC;;AACA,MAAME,aAAa,GAAGD,OAAO,CAAC,aAAD,CAAP,CAAuBC,aAA7C;;AACA,MAAMC,aAAa,GAAGF,OAAO,CAAC,aAAD,CAAP,CAAuBE,aAA7C;;AACA,MAAMC,cAAc,GAAGH,OAAO,CAAC,UAAD,CAAP,CAAoBG,cAA3C;;AACA,MAAMC,UAAU,GAAGJ,OAAO,CAAC,SAAD,CAAP,CAAmBI,UAAtC;;AACA,MAAMC,cAAc,GAAGL,OAAO,CAAC,SAAD,CAAP,CAAmBK,cAA1C;;AAEA,MAAMC,sBAAN,SAAqCJ,aAArC,CAAmD;AACjDK,EAAAA,WAAW,CAACC,UAAD,EAAaC,UAAb,EAAyBC,OAAzB,EAAkC;AAC3C,UAAMA,OAAN;AAEA,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACD;;AAEDE,EAAAA,OAAO,CAACC,QAAD,EAAW;AAChB,UAAMC,IAAI,GAAG,KAAKL,UAAlB;AACA,UAAMC,UAAU,GAAG,KAAKA,UAAxB;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAnB;AAEA,UAAMI,YAAY,GAAGD,IAAI,CAACE,CAAL,CAAOC,QAAP,CAAgBF,YAAhB,EAArB,CALgB,CAOhB;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,UAAU,CAACS,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,UAAIR,UAAU,CAACQ,CAAD,CAAV,CAAcE,IAAd,IAAsB,IAA1B,EAAgC;AAC9B,cAAMC,IAAI,GAAG,EAAb,CAD8B,CAG9B;;AACA,YAAIX,UAAU,CAACQ,CAAD,CAAV,CAAcI,SAAd,IAA2BP,YAA3B,IAA2C,CAACA,YAAY,CAACQ,qBAA7D,EAAoF;AAClF,iBAAOV,QAAQ,CAAC,IAAIR,UAAJ,CAAe,kDAAf,CAAD,CAAf;AACD;;AAED,aAAK,IAAIe,IAAT,IAAiBV,UAAU,CAACQ,CAAD,CAAV,CAAcM,GAA/B,EAAoC;AAClCH,UAAAA,IAAI,CAACI,IAAL,CAAW,GAAEL,IAAK,IAAGV,UAAU,CAACQ,CAAD,CAAV,CAAcM,GAAd,CAAkBJ,IAAlB,CAAwB,EAA7C;AACD,SAV6B,CAY9B;;;AACAV,QAAAA,UAAU,CAACQ,CAAD,CAAV,CAAcE,IAAd,GAAqBC,IAAI,CAACK,IAAL,CAAU,GAAV,CAArB;AACD;AACF;;AAEDf,IAAAA,OAAO,GAAGgB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjB,OAAlB,EAA2B;AAAEkB,MAAAA,cAAc,EAAEvB,cAAc,CAACwB;AAAjC,KAA3B,CAAV,CA1BgB,CA4BhB;;AACA1B,IAAAA,cAAc,CACZU,IAAI,CAACE,CAAL,CAAOe,EADK,EAEZ;AACEC,MAAAA,aAAa,EAAElB,IAAI,CAACmB,cADtB;AAEEC,MAAAA,OAAO,EAAExB;AAFX,KAFY,EAMZC,OANY,EAOZE,QAPY,CAAd;AASD;;AA9CgD;;AAiDnDX,aAAa,CAACK,sBAAD,EAAyBP,MAAM,CAACmC,eAAhC,CAAb;AAEAC,MAAM,CAACC,OAAP,GAAiB9B,sBAAjB","sourcesContent":["'use strict';\n\nconst Aspect = require('./operation').Aspect;\nconst defineAspects = require('./operation').defineAspects;\nconst OperationBase = require('./operation').OperationBase;\nconst executeCommand = require('./db_ops').executeCommand;\nconst MongoError = require('../core').MongoError;\nconst ReadPreference = require('../core').ReadPreference;\n\nclass CreateIndexesOperation extends OperationBase {\n  constructor(collection, indexSpecs, options) {\n    super(options);\n\n    this.collection = collection;\n    this.indexSpecs = indexSpecs;\n  }\n\n  execute(callback) {\n    const coll = this.collection;\n    const indexSpecs = this.indexSpecs;\n    let options = this.options;\n\n    const capabilities = coll.s.topology.capabilities();\n\n    // Ensure we generate the correct name if the parameter is not set\n    for (let i = 0; i < indexSpecs.length; i++) {\n      if (indexSpecs[i].name == null) {\n        const keys = [];\n\n        // Did the user pass in a collation, check if our write server supports it\n        if (indexSpecs[i].collation && capabilities && !capabilities.commandsTakeCollation) {\n          return callback(new MongoError('server/primary/mongos does not support collation'));\n        }\n\n        for (let name in indexSpecs[i].key) {\n          keys.push(`${name}_${indexSpecs[i].key[name]}`);\n        }\n\n        // Set the name\n        indexSpecs[i].name = keys.join('_');\n      }\n    }\n\n    options = Object.assign({}, options, { readPreference: ReadPreference.PRIMARY });\n\n    // Execute the index\n    executeCommand(\n      coll.s.db,\n      {\n        createIndexes: coll.collectionName,\n        indexes: indexSpecs\n      },\n      options,\n      callback\n    );\n  }\n}\n\ndefineAspects(CreateIndexesOperation, Aspect.WRITE_OPERATION);\n\nmodule.exports = CreateIndexesOperation;\n"]},"metadata":{},"sourceType":"script"}