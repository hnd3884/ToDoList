{"ast":null,"code":"'use strict';\n\nconst inherits = require('util').inherits;\n\nconst f = require('util').format;\n\nconst EventEmitter = require('events').EventEmitter;\n\nconst CoreCursor = require('../cursor').CoreCursor;\n\nconst Logger = require('../connection/logger');\n\nconst retrieveBSON = require('../connection/utils').retrieveBSON;\n\nconst MongoError = require('../error').MongoError;\n\nconst Server = require('./server');\n\nconst diff = require('./shared').diff;\n\nconst cloneOptions = require('./shared').cloneOptions;\n\nconst SessionMixins = require('./shared').SessionMixins;\n\nconst isRetryableWritesSupported = require('./shared').isRetryableWritesSupported;\n\nconst relayEvents = require('../utils').relayEvents;\n\nconst isRetryableError = require('../error').isRetryableError;\n\nconst BSON = retrieveBSON();\n\nconst getMMAPError = require('./shared').getMMAPError;\n\nconst makeClientMetadata = require('../utils').makeClientMetadata;\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n */\n//\n// States\n\n\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYING = 'destroying';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYING, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYING, DESTROYED],\n    destroyed: [DESTROYED]\n  }; // Get current state\n\n  var legalStates = legalTransitions[self.state];\n\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(f('Mongos with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]', self.id, self.state, newState, legalStates));\n  }\n} //\n// ReplSet instance id\n\n\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\n\nvar Mongos = function (seedlist, options) {\n  options = options || {}; // Get replSet Id\n\n  this.id = id++; // Internal state\n\n  this.s = {\n    options: Object.assign({\n      metadata: makeClientMetadata(options)\n    }, options),\n    // BSON instance\n    bson: options.bson || new BSON([BSON.Binary, BSON.Code, BSON.DBRef, BSON.Decimal128, BSON.Double, BSON.Int32, BSON.Long, BSON.Map, BSON.MaxKey, BSON.MinKey, BSON.ObjectId, BSON.BSONRegExp, BSON.Symbol, BSON.Timestamp]),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15\n  }; // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n\n  if (this.s.logger.isWarn() && this.s.options.socketTimeout !== 0 && this.s.options.socketTimeout < this.s.haInterval) {\n    this.s.logger.warn(f('warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts', this.s.options.socketTimeout, this.s.haInterval));\n  } // Disconnected state\n\n\n  this.state = DISCONNECTED; // Current proxies we are connecting to\n\n  this.connectingProxies = []; // Currently connected proxies\n\n  this.connectedProxies = []; // Disconnected proxies\n\n  this.disconnectedProxies = []; // Index of proxy to run operations against\n\n  this.index = 0; // High availability timeout id\n\n  this.haTimeoutId = null; // Last ismaster\n\n  this.ismaster = null; // Description of the Replicaset\n\n  this.topologyDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  }; // Highest clusterTime seen in responses from the current deployment\n\n  this.clusterTime = null; // Add event listener\n\n  EventEmitter.call(this);\n};\n\ninherits(Mongos, EventEmitter);\nObject.assign(Mongos.prototype, SessionMixins);\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable: true,\n  get: function () {\n    return 'mongos';\n  }\n});\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable: true,\n  get: function () {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\nObject.defineProperty(Mongos.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function () {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n/**\n * Emit event if it exists\n * @method\n */\n\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\nconst SERVER_EVENTS = ['serverDescriptionChanged', 'error', 'close', 'timeout', 'parseError'];\n\nfunction destroyServer(server, options, callback) {\n  options = options || {};\n  SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, callback);\n}\n/**\n * Initiate server connect\n */\n\n\nMongos.prototype.connect = function (options) {\n  var self = this; // Add any connect level options to the internal state\n\n  this.s.connectOptions = options || {}; // Set connecting state\n\n  stateTransition(this, CONNECTING); // Create server instances\n\n  var servers = this.s.seedlist.map(function (x) {\n    const server = new Server(Object.assign({}, self.s.options, x, options, {\n      reconnect: false,\n      monitoring: false,\n      parent: self\n    }));\n    relayEvents(server, self, ['serverDescriptionChanged']);\n    return server;\n  }); // Emit the topology opening event\n\n  emitSDAMEvent(this, 'topologyOpening', {\n    topologyId: this.id\n  }); // Start all server connections\n\n  connectProxies(self, servers);\n};\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\n\n\nMongos.prototype.auth = function (credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\nfunction handleEvent(self) {\n  return function () {\n    if (self.state === DESTROYED || self.state === DESTROYING) {\n      return;\n    } // Move to list of disconnectedProxies\n\n\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this); // Emit the initial topology\n\n    emitTopologyDescriptionChanged(self); // Emit the left signal\n\n    self.emit('left', 'mongos', this); // Emit the sdam event\n\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: this.name\n    });\n  };\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function () {\n    var _this = this; // Destroy the instance\n\n\n    if (self.state === DESTROYED) {\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self); // Move from connectingProxies\n\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    } // Check the type of server\n\n\n    if (event === 'connect') {\n      // Get last known ismaster\n      self.ismaster = _this.lastIsMaster(); // Is this not a proxy, remove t\n\n      if (self.ismaster.msg === 'isdbgrid') {\n        // Add to the connectd list\n        for (let i = 0; i < self.connectedProxies.length; i++) {\n          if (self.connectedProxies[i].name === _this.name) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this); // Emit the initial topology\n\n            emitTopologyDescriptionChanged(self);\n\n            _this.destroy();\n\n            return self.emit('failed', _this);\n          }\n        } // Remove the handlers\n\n\n        for (let i = 0; i < handlers.length; i++) {\n          _this.removeAllListeners(handlers[i]);\n        } // Add stable state handlers\n\n\n        _this.on('error', handleEvent(self, 'error'));\n\n        _this.on('close', handleEvent(self, 'close'));\n\n        _this.on('timeout', handleEvent(self, 'timeout'));\n\n        _this.on('parseError', handleEvent(self, 'parseError')); // Move from connecting proxies connected\n\n\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _this); // Emit the joined event\n\n        self.emit('joined', 'mongos', _this);\n      } else {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          var message = 'expected mongos proxy, but found replicaset member mongod for server %s'; // We have a standalone server\n\n          if (!self.ismaster.hosts) {\n            message = 'expected mongos proxy, but found standalone mongod for server %s';\n          }\n\n          self.s.logger.warn(f(message, _this.name));\n        } // This is not a mongos proxy, destroy and remove it completely\n\n\n        _this.destroy(true);\n\n        removeProxyFrom(self.connectingProxies, _this); // Emit the left event\n\n        self.emit('left', 'server', _this); // Emit failed event\n\n        self.emit('failed', _this);\n      }\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this); // Emit the left event\n\n      self.emit('left', 'mongos', this); // Emit failed event\n\n      self.emit('failed', this);\n    } // Emit the initial topology\n\n\n    emitTopologyDescriptionChanged(self); // Trigger topologyMonitor\n\n    if (self.connectingProxies.length === 0) {\n      // Emit connected if we are connected\n      if (self.connectedProxies.length > 0 && self.state === CONNECTING) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED); // Emit the connect event\n\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if (self.disconnectedProxies.length === 0) {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          self.s.logger.warn(f('no mongos proxies found in seed list, did you mean to connect to a replicaset'));\n        } // Emit the error that no proxies were found\n\n\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      } // Topology monitor\n\n\n      topologyMonitor(self, {\n        firstConnect: true\n      });\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers); // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function () {\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: self.id,\n        address: server.name\n      }); // Emit the initial topology\n\n      emitTopologyDescriptionChanged(self); // Add event handlers\n\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect')); // Command Monitoring events\n\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']); // Start connection\n\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  } // Start all the servers\n\n\n  servers.forEach(server => connect(server, timeoutInterval++));\n}\n\nfunction pickProxy(self, session) {\n  // TODO: Destructure :)\n  const transaction = session && session.transaction;\n\n  if (transaction && transaction.server) {\n    if (transaction.server.isConnected()) {\n      return transaction.server;\n    } else {\n      transaction.unpinServer();\n    }\n  } // Get the currently connected Proxies\n\n\n  var connectedProxies = self.connectedProxies.slice(0); // Set lower bound\n\n  var lowerBoundLatency = Number.MAX_VALUE; // Determine the lower bound for the Proxies\n\n  for (var i = 0; i < connectedProxies.length; i++) {\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  } // Filter out the possible servers\n\n\n  connectedProxies = connectedProxies.filter(function (server) {\n    if (server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS && server.isConnected()) {\n      return true;\n    }\n  });\n  let proxy; // We have no connectedProxies pick first of the connected ones\n\n  if (connectedProxies.length === 0) {\n    proxy = self.connectedProxies[0];\n  } else {\n    // Get proxy\n    proxy = connectedProxies[self.index % connectedProxies.length]; // Update the index\n\n    self.index = (self.index + 1) % connectedProxies.length;\n  }\n\n  if (transaction && transaction.isActive && proxy && proxy.isConnected()) {\n    transaction.pinServer(proxy);\n  } // Return the proxy\n\n\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for (i = 0; i < to.length; i++) {\n    if (to[i].name === proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length; // Handle events\n\n  var _handleEvent = function (self, event) {\n    return function () {\n      var _self = this;\n\n      count = count - 1; // Destroyed\n\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        return this.destroy();\n      }\n\n      if (event === 'connect') {\n        // Destroyed\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n          return _self.destroy();\n        } // Remove the handlers\n\n\n        for (var i = 0; i < handlers.length; i++) {\n          _self.removeAllListeners(handlers[i]);\n        } // Add stable state handlers\n\n\n        _self.on('error', handleEvent(self, 'error'));\n\n        _self.on('close', handleEvent(self, 'close'));\n\n        _self.on('timeout', handleEvent(self, 'timeout'));\n\n        _self.on('parseError', handleEvent(self, 'parseError')); // Move to the connected servers\n\n\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _self); // Emit topology Change\n\n        emitTopologyDescriptionChanged(self); // Emit joined event\n\n        self.emit('joined', 'mongos', _self);\n      } else {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      } // Are we done finish up callback\n\n\n      if (count === 0) {\n        callback();\n      }\n    };\n  }; // No new servers\n\n\n  if (count === 0) {\n    return callback();\n  } // Execute method\n\n\n  function execute(_server, i) {\n    setTimeout(function () {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        return;\n      } // Create a new server instance\n\n\n      var server = new Server(Object.assign({}, self.s.options, {\n        host: _server.name.split(':')[0],\n        port: parseInt(_server.name.split(':')[1], 10),\n        reconnect: false,\n        monitoring: false,\n        parent: self\n      }));\n      destroyServer(_server, {\n        force: true\n      });\n      removeProxyFrom(self.disconnectedProxies, _server); // Relay the server description change\n\n      relayEvents(server, self, ['serverDescriptionChanged']); // Emit opening server event\n\n      self.emit('serverOpening', {\n        topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,\n        address: server.name\n      }); // Add temp handlers\n\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError')); // Command Monitoring events\n\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']); // Connect to proxy\n\n      self.connectingProxies.push(server);\n      server.connect(self.s.connectOptions);\n    }, i);\n  } // Create new instances\n\n\n  for (var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {}; // no need to set up the monitor if we're already closed\n\n  if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n    return;\n  } // Set momitoring timeout\n\n\n  self.haTimeoutId = setTimeout(function () {\n    if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n      return;\n    } // If we have a primary and a disconnect handler, execute\n    // buffered operations\n\n\n    if (self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    } // Get the connectingServers\n\n\n    var proxies = self.connectedProxies.slice(0); // Get the count\n\n    var count = proxies.length; // If the count is zero schedule a new fast\n\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime(); // Emit the server heartbeat start\n\n      emitSDAMEvent(self, 'serverHeartbeatStarted', {\n        connectionId: _server.name\n      }); // Execute ismaster\n\n      _server.command('admin.$cmd', {\n        ismaster: true\n      }, {\n        monitoring: true,\n        socketTimeout: self.s.options.connectionTimeout || 2000\n      }, function (err, r) {\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          // Move from connectingProxies\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n\n          _server.destroy();\n\n          return cb(err, r);\n        } // Calculate latency\n\n\n        var latencyMS = new Date().getTime() - start; // We had an error, remove it from the state\n\n        if (err) {\n          // Emit the server heartbeat failure\n          emitSDAMEvent(self, 'serverHeartbeatFailed', {\n            durationMS: latencyMS,\n            failure: err,\n            connectionId: _server.name\n          }); // Move from connected proxies to disconnected proxies\n\n          moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n        } else {\n          // Update the server ismaster\n          _server.ismaster = r.result;\n          _server.lastIsMasterMS = latencyMS; // Server heart beat event\n\n          emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n            durationMS: latencyMS,\n            reply: r.result,\n            connectionId: _server.name\n          });\n        }\n\n        cb(err, r);\n      });\n    } // No proxies initiate monitor again\n\n\n    if (proxies.length === 0) {\n      // Emit close event if any listeners registered\n      if (self.listeners('close').length > 0 && self.state === CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      } // Attempt to connect to any unknown servers\n\n\n      return reconnectProxies(self, self.disconnectedProxies, function () {\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          return;\n        } // Are we connected ? emit connect event\n\n\n        if (self.state === CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if (self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if (!self.isConnected() && self.listeners('close').length > 0) {\n          self.emit('close', self);\n        } // Perform topology monitor\n\n\n        topologyMonitor(self);\n      });\n    } // Ping all servers\n\n\n    for (var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function () {\n        count = count - 1;\n\n        if (count === 0) {\n          if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n            return;\n          } // Attempt to connect to any unknown servers\n\n\n          reconnectProxies(self, self.disconnectedProxies, function () {\n            if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n              return;\n            } // Perform topology monitor\n\n\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\n\n\nMongos.prototype.lastIsMaster = function () {\n  return this.ismaster;\n};\n/**\n * Unref all connections belong to this server\n * @method\n */\n\n\nMongos.prototype.unref = function () {\n  // Transition state\n  stateTransition(this, UNREFERENCED); // Get all proxies\n\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function (x) {\n    x.unref();\n  });\n  clearTimeout(this.haTimeoutId);\n};\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\n\n\nMongos.prototype.destroy = function (options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  stateTransition(this, DESTROYING);\n\n  if (this.haTimeoutId) {\n    clearTimeout(this.haTimeoutId);\n  }\n\n  const proxies = this.connectedProxies.concat(this.connectingProxies);\n  let serverCount = proxies.length;\n\n  const serverDestroyed = () => {\n    serverCount--;\n\n    if (serverCount > 0) {\n      return;\n    }\n\n    emitTopologyDescriptionChanged(this);\n    emitSDAMEvent(this, 'topologyClosed', {\n      topologyId: this.id\n    });\n    stateTransition(this, DESTROYED);\n\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n\n  if (serverCount === 0) {\n    serverDestroyed();\n    return;\n  } // Destroy all connecting servers\n\n\n  proxies.forEach(server => {\n    // Emit the sdam event\n    this.emit('serverClosed', {\n      topologyId: this.id,\n      address: server.name\n    });\n    destroyServer(server, options, serverDestroyed);\n    moveServerFrom(this.connectedProxies, this.disconnectedProxies, server);\n  });\n};\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\n\n\nMongos.prototype.isConnected = function () {\n  return this.connectedProxies.length > 0;\n};\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\n\n\nMongos.prototype.isDestroyed = function () {\n  return this.state === DESTROYED;\n}; //\n// Operations\n//\n\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') callback = options, options = {};\n  options = options || {}; // TODO: once we drop Node 4, use destructuring either here or in arguments.\n\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops; // Pick a server\n\n  let server = pickProxy(self, options.session); // No server found error out\n\n  if (!server) return callback(new MongoError('no mongos proxy available'));\n  const willRetryWrite = !args.retrying && !!options.retryWrites && options.session && isRetryableWritesSupported(self) && !options.session.inTransaction();\n\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n\n    if (!isRetryableError(err) || !willRetryWrite) {\n      err = getMMAPError(err);\n      return callback(err);\n    } // Pick another server\n\n\n    server = pickProxy(self, options.session); // No server found error out with original error\n\n    if (!server) {\n      return callback(err);\n    }\n\n    const newArgs = Object.assign({}, args, {\n      retrying: true\n    });\n    return executeWriteOperation(newArgs, options, callback);\n  };\n\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  } // increment and assign txnNumber\n\n\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  } // rerun the operation\n\n\n  server[op](ns, ops, options, handler);\n}\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.insert = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  } // Not connected but we have a disconnecthandler\n\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation({\n    self: this,\n    op: 'insert',\n    ns,\n    ops\n  }, options, callback);\n};\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.update = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  } // Not connected but we have a disconnecthandler\n\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation({\n    self: this,\n    op: 'update',\n    ns,\n    ops\n  }, options, callback);\n};\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.remove = function (ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  } // Not connected but we have a disconnecthandler\n\n\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  } // No mongos proxy available\n\n\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Execute write operation\n\n\n  executeWriteOperation({\n    self: this,\n    op: 'remove',\n    ns,\n    ops\n  }, options, callback);\n};\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\n\n\nMongos.prototype.command = function (ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    callback = options, options = {}, options = options || {};\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  var self = this; // Pick a proxy\n\n  var server = pickProxy(self, options.session); // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  } // No server returned we had an error\n\n\n  if (server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  } // Cloned options\n\n\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n  const willRetryWrite = !options.retrying && options.retryWrites && options.session && isRetryableWritesSupported(self) && !options.session.inTransaction() && isWriteCommand(cmd);\n\n  const cb = (err, result) => {\n    if (!err) return callback(null, result);\n\n    if (!isRetryableError(err)) {\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newOptions = Object.assign({}, clonedOptions, {\n        retrying: true\n      });\n      return this.command(ns, cmd, newOptions, callback);\n    }\n\n    return callback(err);\n  }; // increment and assign txnNumber\n\n\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  } // Execute the command\n\n\n  server.command(ns, cmd, clonedOptions, cb);\n};\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\n\n\nMongos.prototype.cursor = function (ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this; // Set up final cursor type\n\n  var FinalCursor = options.cursorFactory || this.s.Cursor; // Return the cursor\n\n  return new FinalCursor(topology, ns, cmd, options);\n};\n/**\n * Selects a server\n *\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Unused\n * @param {ClientSession} [options.session] Specify a session if it is being used\n * @param {function} callback\n */\n\n\nMongos.prototype.selectServer = function (selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined') callback = selector, selector = undefined, options = {};\n  if (typeof options === 'function') callback = options, options = selector, selector = undefined;\n  options = options || {};\n  const server = pickProxy(this, options.session);\n\n  if (server == null) {\n    callback(new MongoError('server selection failed'));\n    return;\n  }\n\n  if (this.s.debug) this.emit('pickedServer', null, server);\n  callback(null, server);\n};\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\n\n\nMongos.prototype.connections = function () {\n  var connections = [];\n\n  for (var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n};\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n\n    if (self.connectedProxies.length > 0) {\n      topology = 'Sharded';\n    } // Generate description\n\n\n    var description = {\n      topologyType: topology,\n      servers: []\n    }; // All proxies\n\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies); // Add all the disconnected proxies\n\n    description.servers = description.servers.concat(proxies.map(function (x) {\n      var description = x.getDescription();\n      description.type = 'Unknown';\n      return description;\n    })); // Add all the connected proxies\n\n    description.servers = description.servers.concat(self.connectedProxies.map(function (x) {\n      var description = x.getDescription();\n      description.type = 'Mongos';\n      return description;\n    })); // Get the diff\n\n    var diffResult = diff(self.topologyDescription, description); // Create the result\n\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.topologyDescription,\n      newDescription: description,\n      diff: diffResult\n    }; // Emit the topologyDescription change\n\n    if (diffResult.servers.length > 0) {\n      self.emit('topologyDescriptionChanged', result);\n    } // Set the new description\n\n\n    self.topologyDescription = description;\n  }\n}\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Mongos#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Mongos#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Mongos#commandFailed\n * @type {object}\n */\n\n\nmodule.exports = Mongos;","map":{"version":3,"sources":["/home/hoangnd/source/ReactJS/todolist/node_modules/mongodb/lib/core/topologies/mongos.js"],"names":["inherits","require","f","format","EventEmitter","CoreCursor","Logger","retrieveBSON","MongoError","Server","diff","cloneOptions","SessionMixins","isRetryableWritesSupported","relayEvents","isRetryableError","BSON","getMMAPError","makeClientMetadata","DISCONNECTED","CONNECTING","CONNECTED","UNREFERENCED","DESTROYING","DESTROYED","stateTransition","self","newState","legalTransitions","disconnected","connecting","connected","unreferenced","destroyed","legalStates","state","indexOf","s","logger","error","id","handlers","Mongos","seedlist","options","Object","assign","metadata","bson","Binary","Code","DBRef","Decimal128","Double","Int32","Long","Map","MaxKey","MinKey","ObjectId","BSONRegExp","Symbol","Timestamp","Cursor","cursorFactory","haInterval","disconnectHandler","index","connectOptions","debug","localThresholdMS","isWarn","socketTimeout","warn","connectingProxies","connectedProxies","disconnectedProxies","haTimeoutId","ismaster","topologyDescription","topologyType","servers","clusterTime","call","prototype","defineProperty","enumerable","get","native","logicalSessionTimeoutMinutes","emitSDAMEvent","event","description","listeners","length","emit","SERVER_EVENTS","destroyServer","server","callback","forEach","removeAllListeners","destroy","connect","map","x","reconnect","monitoring","parent","topologyId","connectProxies","auth","credentials","handleEvent","moveServerFrom","emitTopologyDescriptionChanged","address","name","handleInitialConnectEvent","_this","lastIsMaster","msg","i","on","message","hosts","removeProxyFrom","topologyMonitor","firstConnect","concat","timeoutInterval","setTimeout","once","pickProxy","session","transaction","isConnected","unpinServer","slice","lowerBoundLatency","Number","MAX_VALUE","lastIsMasterMS","filter","proxy","isActive","pinServer","from","to","splice","push","reconnectProxies","proxies","count","_handleEvent","_self","execute","_server","host","split","port","parseInt","force","pingServer","cb","start","Date","getTime","connectionId","command","connectionTimeout","err","r","latencyMS","durationMS","failure","result","reply","unref","clearTimeout","serverCount","serverDestroyed","isDestroyed","executeWriteOperation","args","op","ns","ops","willRetryWrite","retrying","retryWrites","inTransaction","handler","newArgs","operationId","incrementTransactionNumber","insert","add","update","remove","RETRYABLE_WRITE_OPERATIONS","isWriteCommand","some","cmd","clonedOptions","topology","newOptions","cursor","FinalCursor","selectServer","selector","undefined","connections","getDescription","type","diffResult","previousDescription","newDescription","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst inherits = require('util').inherits;\nconst f = require('util').format;\nconst EventEmitter = require('events').EventEmitter;\nconst CoreCursor = require('../cursor').CoreCursor;\nconst Logger = require('../connection/logger');\nconst retrieveBSON = require('../connection/utils').retrieveBSON;\nconst MongoError = require('../error').MongoError;\nconst Server = require('./server');\nconst diff = require('./shared').diff;\nconst cloneOptions = require('./shared').cloneOptions;\nconst SessionMixins = require('./shared').SessionMixins;\nconst isRetryableWritesSupported = require('./shared').isRetryableWritesSupported;\nconst relayEvents = require('../utils').relayEvents;\nconst isRetryableError = require('../error').isRetryableError;\nconst BSON = retrieveBSON();\nconst getMMAPError = require('./shared').getMMAPError;\nconst makeClientMetadata = require('../utils').makeClientMetadata;\n\n/**\n * @fileOverview The **Mongos** class is a class that represents a Mongos Proxy topology and is\n * used to construct connections.\n */\n\n//\n// States\nvar DISCONNECTED = 'disconnected';\nvar CONNECTING = 'connecting';\nvar CONNECTED = 'connected';\nvar UNREFERENCED = 'unreferenced';\nvar DESTROYING = 'destroying';\nvar DESTROYED = 'destroyed';\n\nfunction stateTransition(self, newState) {\n  var legalTransitions = {\n    disconnected: [CONNECTING, DESTROYING, DESTROYED, DISCONNECTED],\n    connecting: [CONNECTING, DESTROYING, DESTROYED, CONNECTED, DISCONNECTED],\n    connected: [CONNECTED, DISCONNECTED, DESTROYING, DESTROYED, UNREFERENCED],\n    unreferenced: [UNREFERENCED, DESTROYING, DESTROYED],\n    destroyed: [DESTROYED]\n  };\n\n  // Get current state\n  var legalStates = legalTransitions[self.state];\n  if (legalStates && legalStates.indexOf(newState) !== -1) {\n    self.state = newState;\n  } else {\n    self.s.logger.error(\n      f(\n        'Mongos with id [%s] failed attempted illegal state transition from [%s] to [%s] only following state allowed [%s]',\n        self.id,\n        self.state,\n        newState,\n        legalStates\n      )\n    );\n  }\n}\n\n//\n// ReplSet instance id\nvar id = 1;\nvar handlers = ['connect', 'close', 'error', 'timeout', 'parseError'];\n\n/**\n * Creates a new Mongos instance\n * @class\n * @param {array} seedlist A list of seeds for the replicaset\n * @param {number} [options.haInterval=5000] The High availability period for replicaset inquiry\n * @param {Cursor} [options.cursorFactory=Cursor] The cursor factory class used for all query cursors\n * @param {number} [options.size=5] Server connection pool size\n * @param {boolean} [options.keepAlive=true] TCP Connection keep alive enabled\n * @param {number} [options.keepAliveInitialDelay=0] Initial delay before TCP keep alive enabled\n * @param {number} [options.localThresholdMS=15] Cutoff latency point in MS for MongoS proxy selection\n * @param {boolean} [options.noDelay=true] TCP Connection no delay\n * @param {number} [options.connectionTimeout=1000] TCP Connection timeout setting\n * @param {number} [options.socketTimeout=0] TCP Socket timeout setting\n * @param {boolean} [options.ssl=false] Use SSL for connection\n * @param {boolean|function} [options.checkServerIdentity=true] Ensure we check server identify during SSL, set to false to disable checking. Only works for Node 0.12.x or higher. You can pass in a boolean or your own checkServerIdentity override function.\n * @param {Buffer} [options.ca] SSL Certificate store binary buffer\n * @param {Buffer} [options.crl] SSL Certificate revocation store binary buffer\n * @param {Buffer} [options.cert] SSL Certificate binary buffer\n * @param {Buffer} [options.key] SSL Key file binary buffer\n * @param {string} [options.passphrase] SSL Certificate pass phrase\n * @param {string} [options.servername=null] String containing the server name requested via TLS SNI.\n * @param {boolean} [options.rejectUnauthorized=true] Reject unauthorized server certificates\n * @param {boolean} [options.promoteLongs=true] Convert Long values from the db into Numbers if they fit into 53 bits\n * @param {boolean} [options.promoteValues=true] Promotes BSON values to native types where possible, set to false to only receive wrapper types.\n * @param {boolean} [options.promoteBuffers=false] Promotes Binary BSON values to native Node Buffers.\n * @param {boolean} [options.domainsEnabled=false] Enable the wrapping of the callback in the current domain, disabled by default to avoid perf hit.\n * @param {boolean} [options.monitorCommands=false] Enable command monitoring for this topology\n * @return {Mongos} A cursor instance\n * @fires Mongos#connect\n * @fires Mongos#reconnect\n * @fires Mongos#joined\n * @fires Mongos#left\n * @fires Mongos#failed\n * @fires Mongos#fullsetup\n * @fires Mongos#all\n * @fires Mongos#serverHeartbeatStarted\n * @fires Mongos#serverHeartbeatSucceeded\n * @fires Mongos#serverHeartbeatFailed\n * @fires Mongos#topologyOpening\n * @fires Mongos#topologyClosed\n * @fires Mongos#topologyDescriptionChanged\n * @property {string} type the topology type.\n * @property {string} parserType the parser type used (c++ or js).\n */\nvar Mongos = function(seedlist, options) {\n  options = options || {};\n\n  // Get replSet Id\n  this.id = id++;\n\n  // Internal state\n  this.s = {\n    options: Object.assign({ metadata: makeClientMetadata(options) }, options),\n    // BSON instance\n    bson:\n      options.bson ||\n      new BSON([\n        BSON.Binary,\n        BSON.Code,\n        BSON.DBRef,\n        BSON.Decimal128,\n        BSON.Double,\n        BSON.Int32,\n        BSON.Long,\n        BSON.Map,\n        BSON.MaxKey,\n        BSON.MinKey,\n        BSON.ObjectId,\n        BSON.BSONRegExp,\n        BSON.Symbol,\n        BSON.Timestamp\n      ]),\n    // Factory overrides\n    Cursor: options.cursorFactory || CoreCursor,\n    // Logger instance\n    logger: Logger('Mongos', options),\n    // Seedlist\n    seedlist: seedlist,\n    // Ha interval\n    haInterval: options.haInterval ? options.haInterval : 10000,\n    // Disconnect handler\n    disconnectHandler: options.disconnectHandler,\n    // Server selection index\n    index: 0,\n    // Connect function options passed in\n    connectOptions: {},\n    // Are we running in debug mode\n    debug: typeof options.debug === 'boolean' ? options.debug : false,\n    // localThresholdMS\n    localThresholdMS: options.localThresholdMS || 15\n  };\n\n  // Log info warning if the socketTimeout < haInterval as it will cause\n  // a lot of recycled connections to happen.\n  if (\n    this.s.logger.isWarn() &&\n    this.s.options.socketTimeout !== 0 &&\n    this.s.options.socketTimeout < this.s.haInterval\n  ) {\n    this.s.logger.warn(\n      f(\n        'warning socketTimeout %s is less than haInterval %s. This might cause unnecessary server reconnections due to socket timeouts',\n        this.s.options.socketTimeout,\n        this.s.haInterval\n      )\n    );\n  }\n\n  // Disconnected state\n  this.state = DISCONNECTED;\n\n  // Current proxies we are connecting to\n  this.connectingProxies = [];\n  // Currently connected proxies\n  this.connectedProxies = [];\n  // Disconnected proxies\n  this.disconnectedProxies = [];\n  // Index of proxy to run operations against\n  this.index = 0;\n  // High availability timeout id\n  this.haTimeoutId = null;\n  // Last ismaster\n  this.ismaster = null;\n\n  // Description of the Replicaset\n  this.topologyDescription = {\n    topologyType: 'Unknown',\n    servers: []\n  };\n\n  // Highest clusterTime seen in responses from the current deployment\n  this.clusterTime = null;\n\n  // Add event listener\n  EventEmitter.call(this);\n};\n\ninherits(Mongos, EventEmitter);\nObject.assign(Mongos.prototype, SessionMixins);\n\nObject.defineProperty(Mongos.prototype, 'type', {\n  enumerable: true,\n  get: function() {\n    return 'mongos';\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'parserType', {\n  enumerable: true,\n  get: function() {\n    return BSON.native ? 'c++' : 'js';\n  }\n});\n\nObject.defineProperty(Mongos.prototype, 'logicalSessionTimeoutMinutes', {\n  enumerable: true,\n  get: function() {\n    if (!this.ismaster) return null;\n    return this.ismaster.logicalSessionTimeoutMinutes || null;\n  }\n});\n\n/**\n * Emit event if it exists\n * @method\n */\nfunction emitSDAMEvent(self, event, description) {\n  if (self.listeners(event).length > 0) {\n    self.emit(event, description);\n  }\n}\n\nconst SERVER_EVENTS = ['serverDescriptionChanged', 'error', 'close', 'timeout', 'parseError'];\nfunction destroyServer(server, options, callback) {\n  options = options || {};\n  SERVER_EVENTS.forEach(event => server.removeAllListeners(event));\n  server.destroy(options, callback);\n}\n\n/**\n * Initiate server connect\n */\nMongos.prototype.connect = function(options) {\n  var self = this;\n  // Add any connect level options to the internal state\n  this.s.connectOptions = options || {};\n\n  // Set connecting state\n  stateTransition(this, CONNECTING);\n\n  // Create server instances\n  var servers = this.s.seedlist.map(function(x) {\n    const server = new Server(\n      Object.assign({}, self.s.options, x, options, {\n        reconnect: false,\n        monitoring: false,\n        parent: self\n      })\n    );\n\n    relayEvents(server, self, ['serverDescriptionChanged']);\n    return server;\n  });\n\n  // Emit the topology opening event\n  emitSDAMEvent(this, 'topologyOpening', { topologyId: this.id });\n\n  // Start all server connections\n  connectProxies(self, servers);\n};\n\n/**\n * Authenticate the topology.\n * @method\n * @param {MongoCredentials} credentials The credentials for authentication we are using\n * @param {authResultCallback} callback A callback function\n */\nMongos.prototype.auth = function(credentials, callback) {\n  if (typeof callback === 'function') callback(null, null);\n};\n\nfunction handleEvent(self) {\n  return function() {\n    if (self.state === DESTROYED || self.state === DESTROYING) {\n      return;\n    }\n\n    // Move to list of disconnectedProxies\n    moveServerFrom(self.connectedProxies, self.disconnectedProxies, this);\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n    // Emit the left signal\n    self.emit('left', 'mongos', this);\n    // Emit the sdam event\n    self.emit('serverClosed', {\n      topologyId: self.id,\n      address: this.name\n    });\n  };\n}\n\nfunction handleInitialConnectEvent(self, event) {\n  return function() {\n    var _this = this;\n\n    // Destroy the instance\n    if (self.state === DESTROYED) {\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n      // Move from connectingProxies\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      return this.destroy();\n    }\n\n    // Check the type of server\n    if (event === 'connect') {\n      // Get last known ismaster\n      self.ismaster = _this.lastIsMaster();\n\n      // Is this not a proxy, remove t\n      if (self.ismaster.msg === 'isdbgrid') {\n        // Add to the connectd list\n        for (let i = 0; i < self.connectedProxies.length; i++) {\n          if (self.connectedProxies[i].name === _this.name) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectingProxies, self.disconnectedProxies, _this);\n            // Emit the initial topology\n            emitTopologyDescriptionChanged(self);\n            _this.destroy();\n            return self.emit('failed', _this);\n          }\n        }\n\n        // Remove the handlers\n        for (let i = 0; i < handlers.length; i++) {\n          _this.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _this.on('error', handleEvent(self, 'error'));\n        _this.on('close', handleEvent(self, 'close'));\n        _this.on('timeout', handleEvent(self, 'timeout'));\n        _this.on('parseError', handleEvent(self, 'parseError'));\n\n        // Move from connecting proxies connected\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _this);\n        // Emit the joined event\n        self.emit('joined', 'mongos', _this);\n      } else {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          var message = 'expected mongos proxy, but found replicaset member mongod for server %s';\n          // We have a standalone server\n          if (!self.ismaster.hosts) {\n            message = 'expected mongos proxy, but found standalone mongod for server %s';\n          }\n\n          self.s.logger.warn(f(message, _this.name));\n        }\n\n        // This is not a mongos proxy, destroy and remove it completely\n        _this.destroy(true);\n        removeProxyFrom(self.connectingProxies, _this);\n        // Emit the left event\n        self.emit('left', 'server', _this);\n        // Emit failed event\n        self.emit('failed', _this);\n      }\n    } else {\n      moveServerFrom(self.connectingProxies, self.disconnectedProxies, this);\n      // Emit the left event\n      self.emit('left', 'mongos', this);\n      // Emit failed event\n      self.emit('failed', this);\n    }\n\n    // Emit the initial topology\n    emitTopologyDescriptionChanged(self);\n\n    // Trigger topologyMonitor\n    if (self.connectingProxies.length === 0) {\n      // Emit connected if we are connected\n      if (self.connectedProxies.length > 0 && self.state === CONNECTING) {\n        // Set the state to connected\n        stateTransition(self, CONNECTED);\n        // Emit the connect event\n        self.emit('connect', self);\n        self.emit('fullsetup', self);\n        self.emit('all', self);\n      } else if (self.disconnectedProxies.length === 0) {\n        // Print warning if we did not find a mongos proxy\n        if (self.s.logger.isWarn()) {\n          self.s.logger.warn(\n            f('no mongos proxies found in seed list, did you mean to connect to a replicaset')\n          );\n        }\n\n        // Emit the error that no proxies were found\n        return self.emit('error', new MongoError('no mongos proxies found in seed list'));\n      }\n\n      // Topology monitor\n      topologyMonitor(self, { firstConnect: true });\n    }\n  };\n}\n\nfunction connectProxies(self, servers) {\n  // Update connectingProxies\n  self.connectingProxies = self.connectingProxies.concat(servers);\n\n  // Index used to interleaf the server connects, avoiding\n  // runtime issues on io constrained vm's\n  var timeoutInterval = 0;\n\n  function connect(server, timeoutInterval) {\n    setTimeout(function() {\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: self.id,\n        address: server.name\n      });\n\n      // Emit the initial topology\n      emitTopologyDescriptionChanged(self);\n\n      // Add event handlers\n      server.once('close', handleInitialConnectEvent(self, 'close'));\n      server.once('timeout', handleInitialConnectEvent(self, 'timeout'));\n      server.once('parseError', handleInitialConnectEvent(self, 'parseError'));\n      server.once('error', handleInitialConnectEvent(self, 'error'));\n      server.once('connect', handleInitialConnectEvent(self, 'connect'));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Start connection\n      server.connect(self.s.connectOptions);\n    }, timeoutInterval);\n  }\n\n  // Start all the servers\n  servers.forEach(server => connect(server, timeoutInterval++));\n}\n\nfunction pickProxy(self, session) {\n  // TODO: Destructure :)\n  const transaction = session && session.transaction;\n\n  if (transaction && transaction.server) {\n    if (transaction.server.isConnected()) {\n      return transaction.server;\n    } else {\n      transaction.unpinServer();\n    }\n  }\n\n  // Get the currently connected Proxies\n  var connectedProxies = self.connectedProxies.slice(0);\n\n  // Set lower bound\n  var lowerBoundLatency = Number.MAX_VALUE;\n\n  // Determine the lower bound for the Proxies\n  for (var i = 0; i < connectedProxies.length; i++) {\n    if (connectedProxies[i].lastIsMasterMS < lowerBoundLatency) {\n      lowerBoundLatency = connectedProxies[i].lastIsMasterMS;\n    }\n  }\n\n  // Filter out the possible servers\n  connectedProxies = connectedProxies.filter(function(server) {\n    if (\n      server.lastIsMasterMS <= lowerBoundLatency + self.s.localThresholdMS &&\n      server.isConnected()\n    ) {\n      return true;\n    }\n  });\n\n  let proxy;\n\n  // We have no connectedProxies pick first of the connected ones\n  if (connectedProxies.length === 0) {\n    proxy = self.connectedProxies[0];\n  } else {\n    // Get proxy\n    proxy = connectedProxies[self.index % connectedProxies.length];\n    // Update the index\n    self.index = (self.index + 1) % connectedProxies.length;\n  }\n\n  if (transaction && transaction.isActive && proxy && proxy.isConnected()) {\n    transaction.pinServer(proxy);\n  }\n\n  // Return the proxy\n  return proxy;\n}\n\nfunction moveServerFrom(from, to, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n\n  for (i = 0; i < to.length; i++) {\n    if (to[i].name === proxy.name) {\n      to.splice(i, 1);\n    }\n  }\n\n  to.push(proxy);\n}\n\nfunction removeProxyFrom(from, proxy) {\n  for (var i = 0; i < from.length; i++) {\n    if (from[i].name === proxy.name) {\n      from.splice(i, 1);\n    }\n  }\n}\n\nfunction reconnectProxies(self, proxies, callback) {\n  // Count lefts\n  var count = proxies.length;\n\n  // Handle events\n  var _handleEvent = function(self, event) {\n    return function() {\n      var _self = this;\n      count = count - 1;\n\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        return this.destroy();\n      }\n\n      if (event === 'connect') {\n        // Destroyed\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n          return _self.destroy();\n        }\n\n        // Remove the handlers\n        for (var i = 0; i < handlers.length; i++) {\n          _self.removeAllListeners(handlers[i]);\n        }\n\n        // Add stable state handlers\n        _self.on('error', handleEvent(self, 'error'));\n        _self.on('close', handleEvent(self, 'close'));\n        _self.on('timeout', handleEvent(self, 'timeout'));\n        _self.on('parseError', handleEvent(self, 'parseError'));\n\n        // Move to the connected servers\n        moveServerFrom(self.connectingProxies, self.connectedProxies, _self);\n        // Emit topology Change\n        emitTopologyDescriptionChanged(self);\n        // Emit joined event\n        self.emit('joined', 'mongos', _self);\n      } else {\n        // Move from connectingProxies\n        moveServerFrom(self.connectingProxies, self.disconnectedProxies, _self);\n        this.destroy();\n      }\n\n      // Are we done finish up callback\n      if (count === 0) {\n        callback();\n      }\n    };\n  };\n\n  // No new servers\n  if (count === 0) {\n    return callback();\n  }\n\n  // Execute method\n  function execute(_server, i) {\n    setTimeout(function() {\n      // Destroyed\n      if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n        return;\n      }\n\n      // Create a new server instance\n      var server = new Server(\n        Object.assign({}, self.s.options, {\n          host: _server.name.split(':')[0],\n          port: parseInt(_server.name.split(':')[1], 10),\n          reconnect: false,\n          monitoring: false,\n          parent: self\n        })\n      );\n\n      destroyServer(_server, { force: true });\n      removeProxyFrom(self.disconnectedProxies, _server);\n\n      // Relay the server description change\n      relayEvents(server, self, ['serverDescriptionChanged']);\n\n      // Emit opening server event\n      self.emit('serverOpening', {\n        topologyId: server.s.topologyId !== -1 ? server.s.topologyId : self.id,\n        address: server.name\n      });\n\n      // Add temp handlers\n      server.once('connect', _handleEvent(self, 'connect'));\n      server.once('close', _handleEvent(self, 'close'));\n      server.once('timeout', _handleEvent(self, 'timeout'));\n      server.once('error', _handleEvent(self, 'error'));\n      server.once('parseError', _handleEvent(self, 'parseError'));\n\n      // Command Monitoring events\n      relayEvents(server, self, ['commandStarted', 'commandSucceeded', 'commandFailed']);\n\n      // Connect to proxy\n      self.connectingProxies.push(server);\n      server.connect(self.s.connectOptions);\n    }, i);\n  }\n\n  // Create new instances\n  for (var i = 0; i < proxies.length; i++) {\n    execute(proxies[i], i);\n  }\n}\n\nfunction topologyMonitor(self, options) {\n  options = options || {};\n\n  // no need to set up the monitor if we're already closed\n  if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n    return;\n  }\n\n  // Set momitoring timeout\n  self.haTimeoutId = setTimeout(function() {\n    if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n      return;\n    }\n\n    // If we have a primary and a disconnect handler, execute\n    // buffered operations\n    if (self.isConnected() && self.s.disconnectHandler) {\n      self.s.disconnectHandler.execute();\n    }\n\n    // Get the connectingServers\n    var proxies = self.connectedProxies.slice(0);\n    // Get the count\n    var count = proxies.length;\n\n    // If the count is zero schedule a new fast\n    function pingServer(_self, _server, cb) {\n      // Measure running time\n      var start = new Date().getTime();\n\n      // Emit the server heartbeat start\n      emitSDAMEvent(self, 'serverHeartbeatStarted', { connectionId: _server.name });\n\n      // Execute ismaster\n      _server.command(\n        'admin.$cmd',\n        {\n          ismaster: true\n        },\n        {\n          monitoring: true,\n          socketTimeout: self.s.options.connectionTimeout || 2000\n        },\n        function(err, r) {\n          if (\n            self.state === DESTROYED ||\n            self.state === DESTROYING ||\n            self.state === UNREFERENCED\n          ) {\n            // Move from connectingProxies\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n            _server.destroy();\n            return cb(err, r);\n          }\n\n          // Calculate latency\n          var latencyMS = new Date().getTime() - start;\n\n          // We had an error, remove it from the state\n          if (err) {\n            // Emit the server heartbeat failure\n            emitSDAMEvent(self, 'serverHeartbeatFailed', {\n              durationMS: latencyMS,\n              failure: err,\n              connectionId: _server.name\n            });\n            // Move from connected proxies to disconnected proxies\n            moveServerFrom(self.connectedProxies, self.disconnectedProxies, _server);\n          } else {\n            // Update the server ismaster\n            _server.ismaster = r.result;\n            _server.lastIsMasterMS = latencyMS;\n\n            // Server heart beat event\n            emitSDAMEvent(self, 'serverHeartbeatSucceeded', {\n              durationMS: latencyMS,\n              reply: r.result,\n              connectionId: _server.name\n            });\n          }\n\n          cb(err, r);\n        }\n      );\n    }\n\n    // No proxies initiate monitor again\n    if (proxies.length === 0) {\n      // Emit close event if any listeners registered\n      if (self.listeners('close').length > 0 && self.state === CONNECTING) {\n        self.emit('error', new MongoError('no mongos proxy available'));\n      } else {\n        self.emit('close', self);\n      }\n\n      // Attempt to connect to any unknown servers\n      return reconnectProxies(self, self.disconnectedProxies, function() {\n        if (self.state === DESTROYED || self.state === DESTROYING || self.state === UNREFERENCED) {\n          return;\n        }\n\n        // Are we connected ? emit connect event\n        if (self.state === CONNECTING && options.firstConnect) {\n          self.emit('connect', self);\n          self.emit('fullsetup', self);\n          self.emit('all', self);\n        } else if (self.isConnected()) {\n          self.emit('reconnect', self);\n        } else if (!self.isConnected() && self.listeners('close').length > 0) {\n          self.emit('close', self);\n        }\n\n        // Perform topology monitor\n        topologyMonitor(self);\n      });\n    }\n\n    // Ping all servers\n    for (var i = 0; i < proxies.length; i++) {\n      pingServer(self, proxies[i], function() {\n        count = count - 1;\n\n        if (count === 0) {\n          if (\n            self.state === DESTROYED ||\n            self.state === DESTROYING ||\n            self.state === UNREFERENCED\n          ) {\n            return;\n          }\n\n          // Attempt to connect to any unknown servers\n          reconnectProxies(self, self.disconnectedProxies, function() {\n            if (\n              self.state === DESTROYED ||\n              self.state === DESTROYING ||\n              self.state === UNREFERENCED\n            ) {\n              return;\n            }\n\n            // Perform topology monitor\n            topologyMonitor(self);\n          });\n        }\n      });\n    }\n  }, self.s.haInterval);\n}\n\n/**\n * Returns the last known ismaster document for this server\n * @method\n * @return {object}\n */\nMongos.prototype.lastIsMaster = function() {\n  return this.ismaster;\n};\n\n/**\n * Unref all connections belong to this server\n * @method\n */\nMongos.prototype.unref = function() {\n  // Transition state\n  stateTransition(this, UNREFERENCED);\n  // Get all proxies\n  var proxies = this.connectedProxies.concat(this.connectingProxies);\n  proxies.forEach(function(x) {\n    x.unref();\n  });\n\n  clearTimeout(this.haTimeoutId);\n};\n\n/**\n * Destroy the server connection\n * @param {boolean} [options.force=false] Force destroy the pool\n * @method\n */\nMongos.prototype.destroy = function(options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n\n  stateTransition(this, DESTROYING);\n  if (this.haTimeoutId) {\n    clearTimeout(this.haTimeoutId);\n  }\n\n  const proxies = this.connectedProxies.concat(this.connectingProxies);\n  let serverCount = proxies.length;\n  const serverDestroyed = () => {\n    serverCount--;\n    if (serverCount > 0) {\n      return;\n    }\n\n    emitTopologyDescriptionChanged(this);\n    emitSDAMEvent(this, 'topologyClosed', { topologyId: this.id });\n    stateTransition(this, DESTROYED);\n    if (typeof callback === 'function') {\n      callback(null, null);\n    }\n  };\n\n  if (serverCount === 0) {\n    serverDestroyed();\n    return;\n  }\n\n  // Destroy all connecting servers\n  proxies.forEach(server => {\n    // Emit the sdam event\n    this.emit('serverClosed', {\n      topologyId: this.id,\n      address: server.name\n    });\n\n    destroyServer(server, options, serverDestroyed);\n    moveServerFrom(this.connectedProxies, this.disconnectedProxies, server);\n  });\n};\n\n/**\n * Figure out if the server is connected\n * @method\n * @return {boolean}\n */\nMongos.prototype.isConnected = function() {\n  return this.connectedProxies.length > 0;\n};\n\n/**\n * Figure out if the server instance was destroyed by calling destroy\n * @method\n * @return {boolean}\n */\nMongos.prototype.isDestroyed = function() {\n  return this.state === DESTROYED;\n};\n\n//\n// Operations\n//\n\nfunction executeWriteOperation(args, options, callback) {\n  if (typeof options === 'function') (callback = options), (options = {});\n  options = options || {};\n\n  // TODO: once we drop Node 4, use destructuring either here or in arguments.\n  const self = args.self;\n  const op = args.op;\n  const ns = args.ns;\n  const ops = args.ops;\n\n  // Pick a server\n  let server = pickProxy(self, options.session);\n  // No server found error out\n  if (!server) return callback(new MongoError('no mongos proxy available'));\n\n  const willRetryWrite =\n    !args.retrying &&\n    !!options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction();\n\n  const handler = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!isRetryableError(err) || !willRetryWrite) {\n      err = getMMAPError(err);\n      return callback(err);\n    }\n\n    // Pick another server\n    server = pickProxy(self, options.session);\n\n    // No server found error out with original error\n    if (!server) {\n      return callback(err);\n    }\n\n    const newArgs = Object.assign({}, args, { retrying: true });\n    return executeWriteOperation(newArgs, options, callback);\n  };\n\n  if (callback.operationId) {\n    handler.operationId = callback.operationId;\n  }\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  // rerun the operation\n  server[op](ns, ops, options, handler);\n}\n\n/**\n * Insert one or more documents\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of documents to insert\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.insert = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('insert', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'insert', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more update operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of updates\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.update = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('update', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'update', ns, ops }, options, callback);\n};\n\n/**\n * Perform one or more remove operations\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {array} ops An array of removes\n * @param {boolean} [options.ordered=true] Execute in order or out of order\n * @param {object} [options.writeConcern={}] Write concern for the operation\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {boolean} [options.retryWrites] Enable retryable writes for this operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.remove = function(ns, ops, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  // Not connected but we have a disconnecthandler\n  if (!this.isConnected() && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('remove', ns, ops, options, callback);\n  }\n\n  // No mongos proxy available\n  if (!this.isConnected()) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Execute write operation\n  executeWriteOperation({ self: this, op: 'remove', ns, ops }, options, callback);\n};\n\nconst RETRYABLE_WRITE_OPERATIONS = ['findAndModify', 'insert', 'update', 'delete'];\n\nfunction isWriteCommand(command) {\n  return RETRYABLE_WRITE_OPERATIONS.some(op => command[op]);\n}\n\n/**\n * Execute a command\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object} cmd The command hash\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Connection} [options.connection] Specify connection object to execute command against\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {opResultCallback} callback A callback function\n */\nMongos.prototype.command = function(ns, cmd, options, callback) {\n  if (typeof options === 'function') {\n    (callback = options), (options = {}), (options = options || {});\n  }\n\n  if (this.state === DESTROYED) {\n    return callback(new MongoError(f('topology was destroyed')));\n  }\n\n  var self = this;\n\n  // Pick a proxy\n  var server = pickProxy(self, options.session);\n\n  // Topology is not connected, save the call in the provided store to be\n  // Executed at some point when the handler deems it's reconnected\n  if ((server == null || !server.isConnected()) && this.s.disconnectHandler != null) {\n    return this.s.disconnectHandler.add('command', ns, cmd, options, callback);\n  }\n\n  // No server returned we had an error\n  if (server == null) {\n    return callback(new MongoError('no mongos proxy available'));\n  }\n\n  // Cloned options\n  var clonedOptions = cloneOptions(options);\n  clonedOptions.topology = self;\n\n  const willRetryWrite =\n    !options.retrying &&\n    options.retryWrites &&\n    options.session &&\n    isRetryableWritesSupported(self) &&\n    !options.session.inTransaction() &&\n    isWriteCommand(cmd);\n\n  const cb = (err, result) => {\n    if (!err) return callback(null, result);\n    if (!isRetryableError(err)) {\n      return callback(err);\n    }\n\n    if (willRetryWrite) {\n      const newOptions = Object.assign({}, clonedOptions, { retrying: true });\n      return this.command(ns, cmd, newOptions, callback);\n    }\n\n    return callback(err);\n  };\n\n  // increment and assign txnNumber\n  if (willRetryWrite) {\n    options.session.incrementTransactionNumber();\n    options.willRetryWrite = willRetryWrite;\n  }\n\n  // Execute the command\n  server.command(ns, cmd, clonedOptions, cb);\n};\n\n/**\n * Get a new cursor\n * @method\n * @param {string} ns The MongoDB fully qualified namespace (ex: db1.collection1)\n * @param {object|Long} cmd Can be either a command returning a cursor or a cursorId\n * @param {object} [options] Options for the cursor\n * @param {object} [options.batchSize=0] Batchsize for the operation\n * @param {array} [options.documents=[]] Initial documents list for cursor\n * @param {ReadPreference} [options.readPreference] Specify read preference if command supports it\n * @param {Boolean} [options.serializeFunctions=false] Specify if functions on an object should be serialized.\n * @param {Boolean} [options.ignoreUndefined=false] Specify if the BSON serializer should ignore undefined fields.\n * @param {ClientSession} [options.session=null] Session to use for the operation\n * @param {object} [options.topology] The internal topology of the created cursor\n * @returns {Cursor}\n */\nMongos.prototype.cursor = function(ns, cmd, options) {\n  options = options || {};\n  const topology = options.topology || this;\n\n  // Set up final cursor type\n  var FinalCursor = options.cursorFactory || this.s.Cursor;\n\n  // Return the cursor\n  return new FinalCursor(topology, ns, cmd, options);\n};\n\n/**\n * Selects a server\n *\n * @method\n * @param {function} selector Unused\n * @param {ReadPreference} [options.readPreference] Unused\n * @param {ClientSession} [options.session] Specify a session if it is being used\n * @param {function} callback\n */\nMongos.prototype.selectServer = function(selector, options, callback) {\n  if (typeof selector === 'function' && typeof callback === 'undefined')\n    (callback = selector), (selector = undefined), (options = {});\n  if (typeof options === 'function')\n    (callback = options), (options = selector), (selector = undefined);\n  options = options || {};\n\n  const server = pickProxy(this, options.session);\n  if (server == null) {\n    callback(new MongoError('server selection failed'));\n    return;\n  }\n\n  if (this.s.debug) this.emit('pickedServer', null, server);\n  callback(null, server);\n};\n\n/**\n * All raw connections\n * @method\n * @return {Connection[]}\n */\nMongos.prototype.connections = function() {\n  var connections = [];\n\n  for (var i = 0; i < this.connectedProxies.length; i++) {\n    connections = connections.concat(this.connectedProxies[i].connections());\n  }\n\n  return connections;\n};\n\nfunction emitTopologyDescriptionChanged(self) {\n  if (self.listeners('topologyDescriptionChanged').length > 0) {\n    var topology = 'Unknown';\n    if (self.connectedProxies.length > 0) {\n      topology = 'Sharded';\n    }\n\n    // Generate description\n    var description = {\n      topologyType: topology,\n      servers: []\n    };\n\n    // All proxies\n    var proxies = self.disconnectedProxies.concat(self.connectingProxies);\n\n    // Add all the disconnected proxies\n    description.servers = description.servers.concat(\n      proxies.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'Unknown';\n        return description;\n      })\n    );\n\n    // Add all the connected proxies\n    description.servers = description.servers.concat(\n      self.connectedProxies.map(function(x) {\n        var description = x.getDescription();\n        description.type = 'Mongos';\n        return description;\n      })\n    );\n\n    // Get the diff\n    var diffResult = diff(self.topologyDescription, description);\n\n    // Create the result\n    var result = {\n      topologyId: self.id,\n      previousDescription: self.topologyDescription,\n      newDescription: description,\n      diff: diffResult\n    };\n\n    // Emit the topologyDescription change\n    if (diffResult.servers.length > 0) {\n      self.emit('topologyDescriptionChanged', result);\n    }\n\n    // Set the new description\n    self.topologyDescription = description;\n  }\n}\n\n/**\n * A mongos connect event, used to verify that the connection is up and running\n *\n * @event Mongos#connect\n * @type {Mongos}\n */\n\n/**\n * A mongos reconnect event, used to verify that the mongos topology has reconnected\n *\n * @event Mongos#reconnect\n * @type {Mongos}\n */\n\n/**\n * A mongos fullsetup event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#fullsetup\n * @type {Mongos}\n */\n\n/**\n * A mongos all event, used to signal that all topology members have been contacted.\n *\n * @event Mongos#all\n * @type {Mongos}\n */\n\n/**\n * A server member left the mongos list\n *\n * @event Mongos#left\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that left\n */\n\n/**\n * A server member joined the mongos list\n *\n * @event Mongos#joined\n * @type {Mongos}\n * @param {string} type The type of member that left (mongos)\n * @param {Server} server The server object that joined\n */\n\n/**\n * A server opening SDAM monitoring event\n *\n * @event Mongos#serverOpening\n * @type {object}\n */\n\n/**\n * A server closed SDAM monitoring event\n *\n * @event Mongos#serverClosed\n * @type {object}\n */\n\n/**\n * A server description SDAM change monitoring event\n *\n * @event Mongos#serverDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology open SDAM event\n *\n * @event Mongos#topologyOpening\n * @type {object}\n */\n\n/**\n * A topology closed SDAM event\n *\n * @event Mongos#topologyClosed\n * @type {object}\n */\n\n/**\n * A topology structure SDAM change event\n *\n * @event Mongos#topologyDescriptionChanged\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatStarted SDAM event\n *\n * @event Mongos#serverHeartbeatStarted\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatFailed SDAM event\n *\n * @event Mongos#serverHeartbeatFailed\n * @type {object}\n */\n\n/**\n * A topology serverHeartbeatSucceeded SDAM change event\n *\n * @event Mongos#serverHeartbeatSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command was started, if command monitoring is enabled\n *\n * @event Mongos#commandStarted\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command succeeded, if command monitoring is enabled\n *\n * @event Mongos#commandSucceeded\n * @type {object}\n */\n\n/**\n * An event emitted indicating a command failed, if command monitoring is enabled\n *\n * @event Mongos#commandFailed\n * @type {object}\n */\n\nmodule.exports = Mongos;\n"]},"metadata":{},"sourceType":"script"}