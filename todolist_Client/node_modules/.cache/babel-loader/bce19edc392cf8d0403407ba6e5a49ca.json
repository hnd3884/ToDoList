{"ast":null,"code":"'use strict';\n\nconst EventEmitter = require('events');\n\nconst MessageStream = require('./message_stream');\n\nconst MongoError = require('../core/error').MongoError;\n\nconst MongoNetworkError = require('../core/error').MongoNetworkError;\n\nconst MongoWriteConcernError = require('../core/error').MongoWriteConcernError;\n\nconst CommandResult = require('../core/connection/command_result');\n\nconst StreamDescription = require('./stream_description').StreamDescription;\n\nconst wp = require('../core/wireprotocol');\n\nconst apm = require('../core/connection/apm');\n\nconst updateSessionFromResponse = require('../core/sessions').updateSessionFromResponse;\n\nconst uuidV4 = require('../core/utils').uuidV4;\n\nconst now = require('../utils').now;\n\nconst calculateDurationInMs = require('../utils').calculateDurationInMs;\n\nconst kStream = Symbol('stream');\nconst kQueue = Symbol('queue');\nconst kMessageStream = Symbol('messageStream');\nconst kGeneration = Symbol('generation');\nconst kLastUseTime = Symbol('lastUseTime');\nconst kClusterTime = Symbol('clusterTime');\nconst kDescription = Symbol('description');\nconst kIsMaster = Symbol('ismaster');\nconst kAutoEncrypter = Symbol('autoEncrypter');\n\nclass Connection extends EventEmitter {\n  constructor(stream, options) {\n    super(options);\n    this.id = options.id;\n    this.address = streamIdentifier(stream);\n    this.bson = options.bson;\n    this.socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 360000;\n    this.monitorCommands = typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false;\n    this.closed = false;\n    this.destroyed = false;\n    this[kDescription] = new StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = now(); // retain a reference to an `AutoEncrypter` if present\n\n    if (options.autoEncrypter) {\n      this[kAutoEncrypter] = options.autoEncrypter;\n    } // setup parser stream and message handling\n\n\n    this[kQueue] = new Map();\n    this[kMessageStream] = new MessageStream(options);\n    this[kMessageStream].on('message', messageHandler(this));\n    this[kStream] = stream;\n    stream.on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n    stream.on('close', () => {\n      if (this.closed) {\n        return;\n      }\n\n      this.closed = true;\n      this[kQueue].forEach(op => op.cb(new MongoNetworkError(`connection ${this.id} to ${this.address} closed`)));\n      this[kQueue].clear();\n      this.emit('close');\n    });\n    stream.on('timeout', () => {\n      if (this.closed) {\n        return;\n      }\n\n      stream.destroy();\n      this.closed = true;\n      this[kQueue].forEach(op => op.cb(new MongoNetworkError(`connection ${this.id} to ${this.address} timed out`)));\n      this[kQueue].clear();\n      this.emit('close');\n    }); // hook the message stream up to the passed in stream\n\n    stream.pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(stream);\n  }\n\n  get description() {\n    return this[kDescription];\n  }\n\n  get ismaster() {\n    return this[kIsMaster];\n  } // the `connect` method stores the result of the handshake ismaster on the connection\n\n\n  set ismaster(response) {\n    this[kDescription].receiveResponse(response); // TODO: remove this, and only use the `StreamDescription` in the future\n\n    this[kIsMaster] = response;\n  }\n\n  get generation() {\n    return this[kGeneration] || 0;\n  }\n\n  get idleTime() {\n    return calculateDurationInMs(this[kLastUseTime]);\n  }\n\n  get clusterTime() {\n    return this[kClusterTime];\n  }\n\n  get stream() {\n    return this[kStream];\n  }\n\n  markAvailable() {\n    this[kLastUseTime] = now();\n  }\n\n  destroy(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = Object.assign({\n      force: false\n    }, options);\n\n    if (this[kStream] == null || this.destroyed) {\n      this.destroyed = true;\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    if (options.force) {\n      this[kStream].destroy();\n      this.destroyed = true;\n\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    this[kStream].end(err => {\n      this.destroyed = true;\n\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  } // Wire protocol methods\n\n\n  command(ns, cmd, options, callback) {\n    wp.command(makeServerTrampoline(this), ns, cmd, options, callback);\n  }\n\n  query(ns, cmd, cursorState, options, callback) {\n    wp.query(makeServerTrampoline(this), ns, cmd, cursorState, options, callback);\n  }\n\n  getMore(ns, cursorState, batchSize, options, callback) {\n    wp.getMore(makeServerTrampoline(this), ns, cursorState, batchSize, options, callback);\n  }\n\n  killCursors(ns, cursorState, callback) {\n    wp.killCursors(makeServerTrampoline(this), ns, cursorState, callback);\n  }\n\n  insert(ns, ops, options, callback) {\n    wp.insert(makeServerTrampoline(this), ns, ops, options, callback);\n  }\n\n  update(ns, ops, options, callback) {\n    wp.update(makeServerTrampoline(this), ns, ops, options, callback);\n  }\n\n  remove(ns, ops, options, callback) {\n    wp.remove(makeServerTrampoline(this), ns, ops, options, callback);\n  }\n\n} /// This lets us emulate a legacy `Server` instance so we can work with the existing wire\n/// protocol methods. Eventually, the operation executor will return a `Connection` to execute\n/// against.\n\n\nfunction makeServerTrampoline(connection) {\n  const server = {\n    description: connection.description,\n    clusterTime: connection[kClusterTime],\n    s: {\n      bson: connection.bson,\n      pool: {\n        write: write.bind(connection),\n        isConnected: () => true\n      }\n    }\n  };\n\n  if (connection[kAutoEncrypter]) {\n    server.autoEncrypter = connection[kAutoEncrypter];\n  }\n\n  return server;\n}\n\nfunction messageHandler(conn) {\n  return function messageHandler(message) {\n    // always emit the message, in case we are streaming\n    conn.emit('message', message);\n\n    if (!conn[kQueue].has(message.responseTo)) {\n      return;\n    }\n\n    const operationDescription = conn[kQueue].get(message.responseTo); // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n\n    conn[kQueue].delete(message.responseTo);\n\n    if (message.moreToCome) {\n      // requeue the callback for next synthetic request\n      conn[kQueue].set(message.requestId, operationDescription);\n    }\n\n    const callback = operationDescription.cb;\n\n    if (operationDescription.socketTimeoutOverride) {\n      conn[kStream].setTimeout(conn.socketTimeout);\n    }\n\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      callback(new MongoError(err));\n      return;\n    }\n\n    if (message.documents[0]) {\n      const document = message.documents[0];\n      const session = operationDescription.session;\n\n      if (session) {\n        updateSessionFromResponse(session, document);\n      }\n\n      if (document.$clusterTime) {\n        conn[kClusterTime] = document.$clusterTime;\n        conn.emit('clusterTimeReceived', document.$clusterTime);\n      }\n\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new MongoError(document));\n          return;\n        }\n      }\n    } // NODE-2382: reenable in our glorious non-leaky abstraction future\n    // callback(null, operationDescription.fullResult ? message : message.documents[0]);\n\n\n    callback(undefined, new CommandResult(operationDescription.fullResult ? message : message.documents[0], conn, message));\n  };\n}\n\nfunction streamIdentifier(stream) {\n  if (typeof stream.address === 'function') {\n    return `${stream.remoteAddress}:${stream.remotePort}`;\n  }\n\n  return uuidV4().toString('hex');\n} // Not meant to be called directly, the wire protocol methods call this assuming it is a `Pool` instance\n\n\nfunction write(command, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n  }\n\n  options = options || {};\n  const operationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    raw: typeof options.raw === 'boolean' ? options.raw : false\n  };\n\n  if (this[kDescription] && this[kDescription].compressor) {\n    operationDescription.agreedCompressor = this[kDescription].compressor;\n\n    if (this[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = this[kDescription].zlibCompressionLevel;\n    }\n  }\n\n  if (typeof options.socketTimeout === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    this[kStream].setTimeout(options.socketTimeout);\n  } // if command monitoring is enabled we need to modify the callback here\n\n\n  if (this.monitorCommands) {\n    this.emit('commandStarted', new apm.CommandStartedEvent(this, command));\n    operationDescription.started = now();\n\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        this.emit('commandFailed', new apm.CommandFailedEvent(this, command, err, operationDescription.started));\n      } else {\n        if (reply && reply.result && (reply.result.ok === 0 || reply.result.$err)) {\n          this.emit('commandFailed', new apm.CommandFailedEvent(this, command, reply.result, operationDescription.started));\n        } else {\n          this.emit('commandSucceeded', new apm.CommandSucceededEvent(this, command, reply, operationDescription.started));\n        }\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n\n  if (!operationDescription.noResponse) {\n    this[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n\n  try {\n    this[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      this[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}\n\nmodule.exports = {\n  Connection\n};","map":{"version":3,"sources":["/home/hoangnd/source/ReactJS/todolist/node_modules/mongodb/lib/cmap/connection.js"],"names":["EventEmitter","require","MessageStream","MongoError","MongoNetworkError","MongoWriteConcernError","CommandResult","StreamDescription","wp","apm","updateSessionFromResponse","uuidV4","now","calculateDurationInMs","kStream","Symbol","kQueue","kMessageStream","kGeneration","kLastUseTime","kClusterTime","kDescription","kIsMaster","kAutoEncrypter","Connection","constructor","stream","options","id","address","streamIdentifier","bson","socketTimeout","monitorCommands","closed","destroyed","generation","autoEncrypter","Map","on","messageHandler","forEach","op","cb","clear","emit","destroy","pipe","description","ismaster","response","receiveResponse","idleTime","clusterTime","markAvailable","callback","Object","assign","force","end","err","command","ns","cmd","makeServerTrampoline","query","cursorState","getMore","batchSize","killCursors","insert","ops","update","remove","connection","server","s","pool","write","bind","isConnected","conn","message","has","responseTo","operationDescription","get","delete","moreToCome","set","requestId","socketTimeoutOverride","setTimeout","parse","documents","document","session","$clusterTime","writeConcernError","ok","$err","errmsg","code","undefined","fullResult","remoteAddress","remotePort","toString","noResponse","documentsReturnedIn","promoteLongs","promoteValues","promoteBuffers","raw","compressor","agreedCompressor","zlibCompressionLevel","CommandStartedEvent","started","reply","CommandFailedEvent","result","CommandSucceededEvent","writeCommand","e","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst EventEmitter = require('events');\nconst MessageStream = require('./message_stream');\nconst MongoError = require('../core/error').MongoError;\nconst MongoNetworkError = require('../core/error').MongoNetworkError;\nconst MongoWriteConcernError = require('../core/error').MongoWriteConcernError;\nconst CommandResult = require('../core/connection/command_result');\nconst StreamDescription = require('./stream_description').StreamDescription;\nconst wp = require('../core/wireprotocol');\nconst apm = require('../core/connection/apm');\nconst updateSessionFromResponse = require('../core/sessions').updateSessionFromResponse;\nconst uuidV4 = require('../core/utils').uuidV4;\nconst now = require('../utils').now;\nconst calculateDurationInMs = require('../utils').calculateDurationInMs;\n\nconst kStream = Symbol('stream');\nconst kQueue = Symbol('queue');\nconst kMessageStream = Symbol('messageStream');\nconst kGeneration = Symbol('generation');\nconst kLastUseTime = Symbol('lastUseTime');\nconst kClusterTime = Symbol('clusterTime');\nconst kDescription = Symbol('description');\nconst kIsMaster = Symbol('ismaster');\nconst kAutoEncrypter = Symbol('autoEncrypter');\n\nclass Connection extends EventEmitter {\n  constructor(stream, options) {\n    super(options);\n\n    this.id = options.id;\n    this.address = streamIdentifier(stream);\n    this.bson = options.bson;\n    this.socketTimeout = typeof options.socketTimeout === 'number' ? options.socketTimeout : 360000;\n    this.monitorCommands =\n      typeof options.monitorCommands === 'boolean' ? options.monitorCommands : false;\n    this.closed = false;\n    this.destroyed = false;\n\n    this[kDescription] = new StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = now();\n\n    // retain a reference to an `AutoEncrypter` if present\n    if (options.autoEncrypter) {\n      this[kAutoEncrypter] = options.autoEncrypter;\n    }\n\n    // setup parser stream and message handling\n    this[kQueue] = new Map();\n    this[kMessageStream] = new MessageStream(options);\n    this[kMessageStream].on('message', messageHandler(this));\n    this[kStream] = stream;\n    stream.on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n\n    stream.on('close', () => {\n      if (this.closed) {\n        return;\n      }\n\n      this.closed = true;\n      this[kQueue].forEach(op =>\n        op.cb(new MongoNetworkError(`connection ${this.id} to ${this.address} closed`))\n      );\n      this[kQueue].clear();\n\n      this.emit('close');\n    });\n\n    stream.on('timeout', () => {\n      if (this.closed) {\n        return;\n      }\n\n      stream.destroy();\n      this.closed = true;\n      this[kQueue].forEach(op =>\n        op.cb(new MongoNetworkError(`connection ${this.id} to ${this.address} timed out`))\n      );\n      this[kQueue].clear();\n\n      this.emit('close');\n    });\n\n    // hook the message stream up to the passed in stream\n    stream.pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(stream);\n  }\n\n  get description() {\n    return this[kDescription];\n  }\n\n  get ismaster() {\n    return this[kIsMaster];\n  }\n\n  // the `connect` method stores the result of the handshake ismaster on the connection\n  set ismaster(response) {\n    this[kDescription].receiveResponse(response);\n\n    // TODO: remove this, and only use the `StreamDescription` in the future\n    this[kIsMaster] = response;\n  }\n\n  get generation() {\n    return this[kGeneration] || 0;\n  }\n\n  get idleTime() {\n    return calculateDurationInMs(this[kLastUseTime]);\n  }\n\n  get clusterTime() {\n    return this[kClusterTime];\n  }\n\n  get stream() {\n    return this[kStream];\n  }\n\n  markAvailable() {\n    this[kLastUseTime] = now();\n  }\n\n  destroy(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = Object.assign({ force: false }, options);\n    if (this[kStream] == null || this.destroyed) {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    if (options.force) {\n      this[kStream].destroy();\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    this[kStream].end(err => {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n    });\n  }\n\n  // Wire protocol methods\n  command(ns, cmd, options, callback) {\n    wp.command(makeServerTrampoline(this), ns, cmd, options, callback);\n  }\n\n  query(ns, cmd, cursorState, options, callback) {\n    wp.query(makeServerTrampoline(this), ns, cmd, cursorState, options, callback);\n  }\n\n  getMore(ns, cursorState, batchSize, options, callback) {\n    wp.getMore(makeServerTrampoline(this), ns, cursorState, batchSize, options, callback);\n  }\n\n  killCursors(ns, cursorState, callback) {\n    wp.killCursors(makeServerTrampoline(this), ns, cursorState, callback);\n  }\n\n  insert(ns, ops, options, callback) {\n    wp.insert(makeServerTrampoline(this), ns, ops, options, callback);\n  }\n\n  update(ns, ops, options, callback) {\n    wp.update(makeServerTrampoline(this), ns, ops, options, callback);\n  }\n\n  remove(ns, ops, options, callback) {\n    wp.remove(makeServerTrampoline(this), ns, ops, options, callback);\n  }\n}\n\n/// This lets us emulate a legacy `Server` instance so we can work with the existing wire\n/// protocol methods. Eventually, the operation executor will return a `Connection` to execute\n/// against.\nfunction makeServerTrampoline(connection) {\n  const server = {\n    description: connection.description,\n    clusterTime: connection[kClusterTime],\n    s: {\n      bson: connection.bson,\n      pool: { write: write.bind(connection), isConnected: () => true }\n    }\n  };\n\n  if (connection[kAutoEncrypter]) {\n    server.autoEncrypter = connection[kAutoEncrypter];\n  }\n\n  return server;\n}\n\nfunction messageHandler(conn) {\n  return function messageHandler(message) {\n    // always emit the message, in case we are streaming\n    conn.emit('message', message);\n    if (!conn[kQueue].has(message.responseTo)) {\n      return;\n    }\n\n    const operationDescription = conn[kQueue].get(message.responseTo);\n\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n    conn[kQueue].delete(message.responseTo);\n    if (message.moreToCome) {\n      // requeue the callback for next synthetic request\n      conn[kQueue].set(message.requestId, operationDescription);\n    }\n\n    const callback = operationDescription.cb;\n    if (operationDescription.socketTimeoutOverride) {\n      conn[kStream].setTimeout(conn.socketTimeout);\n    }\n\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      callback(new MongoError(err));\n      return;\n    }\n\n    if (message.documents[0]) {\n      const document = message.documents[0];\n      const session = operationDescription.session;\n      if (session) {\n        updateSessionFromResponse(session, document);\n      }\n\n      if (document.$clusterTime) {\n        conn[kClusterTime] = document.$clusterTime;\n        conn.emit('clusterTimeReceived', document.$clusterTime);\n      }\n\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new MongoError(document));\n          return;\n        }\n      }\n    }\n\n    // NODE-2382: reenable in our glorious non-leaky abstraction future\n    // callback(null, operationDescription.fullResult ? message : message.documents[0]);\n\n    callback(\n      undefined,\n      new CommandResult(\n        operationDescription.fullResult ? message : message.documents[0],\n        conn,\n        message\n      )\n    );\n  };\n}\n\nfunction streamIdentifier(stream) {\n  if (typeof stream.address === 'function') {\n    return `${stream.remoteAddress}:${stream.remotePort}`;\n  }\n\n  return uuidV4().toString('hex');\n}\n\n// Not meant to be called directly, the wire protocol methods call this assuming it is a `Pool` instance\nfunction write(command, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n  }\n\n  options = options || {};\n  const operationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    fullResult: typeof options.fullResult === 'boolean' ? options.fullResult : false,\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    raw: typeof options.raw === 'boolean' ? options.raw : false\n  };\n\n  if (this[kDescription] && this[kDescription].compressor) {\n    operationDescription.agreedCompressor = this[kDescription].compressor;\n\n    if (this[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = this[kDescription].zlibCompressionLevel;\n    }\n  }\n\n  if (typeof options.socketTimeout === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    this[kStream].setTimeout(options.socketTimeout);\n  }\n\n  // if command monitoring is enabled we need to modify the callback here\n  if (this.monitorCommands) {\n    this.emit('commandStarted', new apm.CommandStartedEvent(this, command));\n\n    operationDescription.started = now();\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        this.emit(\n          'commandFailed',\n          new apm.CommandFailedEvent(this, command, err, operationDescription.started)\n        );\n      } else {\n        if (reply && reply.result && (reply.result.ok === 0 || reply.result.$err)) {\n          this.emit(\n            'commandFailed',\n            new apm.CommandFailedEvent(this, command, reply.result, operationDescription.started)\n          );\n        } else {\n          this.emit(\n            'commandSucceeded',\n            new apm.CommandSucceededEvent(this, command, reply, operationDescription.started)\n          );\n        }\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n\n  if (!operationDescription.noResponse) {\n    this[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n\n  try {\n    this[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      this[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}\n\nmodule.exports = {\n  Connection\n};\n"]},"metadata":{},"sourceType":"script"}