{"ast":null,"code":"'use strict';\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\n\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        super(message);\n      } else {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n\n        for (var name in message) {\n          if (name === 'errmsg') {\n            continue;\n          }\n\n          this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'MongoError';\n  }\n  /**\n   * Legacy name for server error responses\n   */\n\n\n  get errmsg() {\n    return this.message;\n  }\n  /**\n   * Creates a new MongoError object\n   *\n   * @param {Error|string|object} options The options used to create the error.\n   * @return {MongoError} A MongoError instance\n   * @deprecated Use `new MongoError()` instead.\n   */\n\n\n  static create(options) {\n    return new MongoError(options);\n  }\n  /**\n   * Checks the error to see if it has an error label\n   * @param {string} label The error label to check for\n   * @returns {boolean} returns true if the error has the provided error label\n   */\n\n\n  hasErrorLabel(label) {\n    return this.errorLabels && this.errorLabels.indexOf(label) !== -1;\n  }\n\n}\n/**\n * An error indicating an issue with the network, including TCP\n * errors and timeouts.\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n * @extends MongoError\n */\n\n\nclass MongoNetworkError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoNetworkError';\n  }\n\n}\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @extends MongoError\n */\n\n\nclass MongoParseError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoParseError';\n  }\n\n}\n/**\n * An error signifying a client-side timeout event\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\n\n\nclass MongoTimeoutError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    this.name = 'MongoTimeoutError';\n\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n\n}\n/**\n * An error signifying a client-side server selection error\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\n\n\nclass MongoServerSelectionError extends MongoTimeoutError {\n  constructor(message, reason) {\n    super(message, reason);\n    this.name = 'MongoServerSelectionError';\n  }\n\n}\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n * @extends MongoError\n */\n\n\nclass MongoWriteConcernError extends MongoError {\n  constructor(message, result) {\n    super(message);\n    this.name = 'MongoWriteConcernError';\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n} // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\n\nconst RETRYABLE_ERROR_CODES = new Set([6, // HostUnreachable\n7, // HostNotFound\n89, // NetworkTimeout\n91, // ShutdownInProgress\n189, // PrimarySteppedDown\n9001, // SocketException\n10107, // NotMaster\n11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n13435, // NotMasterNoSlaveOk\n13436 // NotMasterOrSecondary\n]);\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @ignore\n * @param {MongoError|Error} error\n */\n\nfunction isRetryableError(error) {\n  return RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || error.message.match(/not master/) || error.message.match(/node is recovering/);\n}\n\nconst SDAM_RECOVERING_CODES = new Set([91, // ShutdownInProgress\n189, // PrimarySteppedDown\n11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n13436 // NotMasterOrSecondary\n]);\nconst SDAM_NOTMASTER_CODES = new Set([10107, // NotMaster\n13435 // NotMasterNoSlaveOk\n]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([11600, // InterruptedAtShutdown\n91 // ShutdownInProgress\n]);\n\nfunction isRecoveringError(err) {\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\n    return true;\n  }\n\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\n}\n\nfunction isNotMasterError(err) {\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\n    return true;\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return err.message.match(/not master/);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\n}\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @ignore\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n * @param {MongoError|Error} error\n */\n\n\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  if (isRecoveringError(error) || isNotMasterError(error)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isNetworkTimeoutError(err) {\n  return err instanceof MongoNetworkError && err.message.match(/timed out/);\n}\n\nmodule.exports = {\n  MongoError,\n  MongoNetworkError,\n  MongoParseError,\n  MongoTimeoutError,\n  MongoServerSelectionError,\n  MongoWriteConcernError,\n  isRetryableError,\n  isSDAMUnrecoverableError,\n  isNodeShuttingDownError,\n  isNetworkTimeoutError\n};","map":{"version":3,"sources":["/home/hoangnd/source/ReactJS/todolist/node_modules/mongodb/lib/core/error.js"],"names":["MongoError","Error","constructor","message","stack","errmsg","$err","name","captureStackTrace","create","options","hasErrorLabel","label","errorLabels","indexOf","MongoNetworkError","MongoParseError","MongoTimeoutError","reason","error","MongoServerSelectionError","makeWriteConcernResultObject","input","output","Object","assign","ok","code","codeName","MongoWriteConcernError","result","RETRYABLE_ERROR_CODES","Set","isRetryableError","has","match","SDAM_RECOVERING_CODES","SDAM_NOTMASTER_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","err","isNotMasterError","isNodeShuttingDownError","isSDAMUnrecoverableError","isNetworkTimeoutError","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        super(message);\n      } else {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n        for (var name in message) {\n          if (name === 'errmsg') {\n            continue;\n          }\n\n          this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'MongoError';\n  }\n\n  /**\n   * Legacy name for server error responses\n   */\n  get errmsg() {\n    return this.message;\n  }\n\n  /**\n   * Creates a new MongoError object\n   *\n   * @param {Error|string|object} options The options used to create the error.\n   * @return {MongoError} A MongoError instance\n   * @deprecated Use `new MongoError()` instead.\n   */\n  static create(options) {\n    return new MongoError(options);\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   * @param {string} label The error label to check for\n   * @returns {boolean} returns true if the error has the provided error label\n   */\n  hasErrorLabel(label) {\n    return this.errorLabels && this.errorLabels.indexOf(label) !== -1;\n  }\n}\n\n/**\n * An error indicating an issue with the network, including TCP\n * errors and timeouts.\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n * @extends MongoError\n */\nclass MongoNetworkError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoNetworkError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @extends MongoError\n */\nclass MongoParseError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoParseError';\n  }\n}\n\n/**\n * An error signifying a client-side timeout event\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\nclass MongoTimeoutError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    this.name = 'MongoTimeoutError';\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n *\n * @param {Error|string|object} message The error message\n * @param {string|object} [reason] The reason the timeout occured\n * @property {string} message The error message\n * @property {string} [reason] An optional reason context for the timeout, generally an error saved during flow of monitoring and selecting servers\n * @extends MongoError\n */\nclass MongoServerSelectionError extends MongoTimeoutError {\n  constructor(message, reason) {\n    super(message, reason);\n    this.name = 'MongoServerSelectionError';\n  }\n}\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n * @extends MongoError\n */\nclass MongoWriteConcernError extends MongoError {\n  constructor(message, result) {\n    super(message);\n    this.name = 'MongoWriteConcernError';\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n}\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set([\n  6, // HostUnreachable\n  7, // HostNotFound\n  89, // NetworkTimeout\n  91, // ShutdownInProgress\n  189, // PrimarySteppedDown\n  9001, // SocketException\n  10107, // NotMaster\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  13435, // NotMasterNoSlaveOk\n  13436 // NotMasterOrSecondary\n]);\n\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @ignore\n * @param {MongoError|Error} error\n */\nfunction isRetryableError(error) {\n  return (\n    RETRYABLE_ERROR_CODES.has(error.code) ||\n    error instanceof MongoNetworkError ||\n    error.message.match(/not master/) ||\n    error.message.match(/node is recovering/)\n  );\n}\n\nconst SDAM_RECOVERING_CODES = new Set([\n  91, // ShutdownInProgress\n  189, // PrimarySteppedDown\n  11600, // InterruptedAtShutdown\n  11602, // InterruptedDueToReplStateChange\n  13436 // NotMasterOrSecondary\n]);\n\nconst SDAM_NOTMASTER_CODES = new Set([\n  10107, // NotMaster\n  13435 // NotMasterNoSlaveOk\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([\n  11600, // InterruptedAtShutdown\n  91 // ShutdownInProgress\n]);\n\nfunction isRecoveringError(err) {\n  if (err.code && SDAM_RECOVERING_CODES.has(err.code)) {\n    return true;\n  }\n\n  return err.message.match(/not master or secondary/) || err.message.match(/node is recovering/);\n}\n\nfunction isNotMasterError(err) {\n  if (err.code && SDAM_NOTMASTER_CODES.has(err.code)) {\n    return true;\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return err.message.match(/not master/);\n}\n\nfunction isNodeShuttingDownError(err) {\n  return err.code && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code);\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @ignore\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n * @param {MongoError|Error} error\n */\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  if (isRecoveringError(error) || isNotMasterError(error)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isNetworkTimeoutError(err) {\n  return err instanceof MongoNetworkError && err.message.match(/timed out/);\n}\n\nmodule.exports = {\n  MongoError,\n  MongoNetworkError,\n  MongoParseError,\n  MongoTimeoutError,\n  MongoServerSelectionError,\n  MongoWriteConcernError,\n  isRetryableError,\n  isSDAMUnrecoverableError,\n  isNodeShuttingDownError,\n  isNetworkTimeoutError\n};\n"]},"metadata":{},"sourceType":"script"}